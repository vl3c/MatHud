from colored_area import ColoredArea
from function import Function
from segment import Segment
import copy

class FunctionSegmentBoundedColoredArea(ColoredArea):
    def __init__(self, func, segment, canvas=None, color="lightblue", opacity=0.3):
        """
        Creates a colored area bounded by a function and a segment.
        func can be:
        - Function object
        - None (interpreted as y=0, the x-axis)
        - A number (interpreted as y=constant)
        """
        name = self._generate_name(func, segment)
        super().__init__(name=name, canvas=canvas, color=color, opacity=opacity)
        self.func = func
        self.segment = segment

    def _generate_name(self, func, segment):
        """Generate a descriptive name for the colored area"""
        f_name = func.name if hasattr(func, 'name') else 'x_axis' if func is None else f'y_{func}'
        s_name = segment.name
        return f"area_between_{f_name}_and_{s_name}"

    def get_class_name(self):
        return 'FunctionSegmentBoundedColoredArea'

    def _get_function_y_at_x(self, x):
        """Get y value for a given x from the function"""
        if self.func is None:  # x-axis
            return 0
        if isinstance(self.func, (int, float)):  # constant function
            return float(self.func)
        if isinstance(self.func, Function):
            try:
                # Convert from canvas coordinates to original coordinates
                orig_x = (x - self.canvas.cartesian2axis.origin.x) / self.canvas.scale_factor
                y = self.func.function(orig_x)
                # Convert y back to canvas coordinates
                return self.canvas.cartesian2axis.origin.y - y * self.canvas.scale_factor
            except (ValueError, ZeroDivisionError):
                return None
        return None

    def _get_bounds(self):
        """Calculate the left and right bounds for the colored area"""
        # For segment bounds
        x1, x2 = self.segment.point1.x, self.segment.point2.x
        seg_left = min(x1, x2)
        seg_right = max(x1, x2)

        # For function bounds
        if isinstance(self.func, Function):
            func_left = self.func.left_bound
            func_right = self.func.right_bound
            # Use intersection of bounds
            left_bound = max(seg_left, func_left)
            right_bound = min(seg_right, func_right)
        else:
            # For x-axis or constant function, use segment bounds
            left_bound = seg_left
            right_bound = seg_right

        return left_bound, right_bound

    def draw(self):
        left_bound, right_bound = self._get_bounds()
        
        # Sample points for the function
        num_points = 100
        dx = (right_bound - left_bound) / (num_points - 1)
        
        # Generate forward path (along function)
        points = []
        for i in range(num_points):
            x = left_bound + i * dx
            y = self._get_function_y_at_x(x)
            if y is not None:
                points.append((x, y))

        # Generate reverse path (along segment)
        # For segment, we only need its endpoints in reverse order
        reverse_points = [(self.segment.point2.x, self.segment.point2.y),
                         (self.segment.point1.x, self.segment.point1.y)]
        
        # Create SVG path using base class method
        self._create_svg_path(points, reverse_points)

    def uses_segment(self, segment):
        """Check if this colored area uses a specific segment"""
        return (self.segment.point1.x == segment.point1.x and 
                self.segment.point1.y == segment.point1.y and
                self.segment.point2.x == segment.point2.x and
                self.segment.point2.y == segment.point2.y)

    def get_state(self):
        state = super().get_state()
        state["args"].update({
            "func": self.func.name if hasattr(self.func, 'name') else str(self.func),
            "segment": self.segment.name
        })
        return state

    def __deepcopy__(self, memo):
        if id(self) in memo:
            return memo[id(self)]
            
        # Create new instance using __init__
        new_area = FunctionSegmentBoundedColoredArea(
            func=self.func,  # Function will be properly deep copied by its own __deepcopy__
            segment=self.segment,  # Segment will be properly deep copied by its own __deepcopy__
            canvas=self.canvas,  # Canvas reference is not deep copied
            color=self.color,
            opacity=self.opacity
        )
        memo[id(self)] = new_area
        return new_area 