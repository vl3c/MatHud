from math_util import MathUtil
from process_function_calls import ProcessFunctionCalls


class FunctionRegistry:
    """Static registry of all available functions and undoable functions.
    This class is responsible for creating and maintaining the mapping of
    function names to their implementations.
    """

    @staticmethod
    def get_available_functions(canvas, workspace_manager, ai_interface=None):
        """Get the dictionary of all available functions.
        
        Args:
            canvas: The canvas instance to bind canvas-related functions to
            workspace_manager: The workspace manager instance to bind workspace functions to
            ai_interface: Optional AIInterface instance for testing functions
            
        Returns:
            dict: Mapping of function names to their implementations
        """
        functions = {
            # Canvas operations
            "reset_canvas": canvas.reset,
            "clear_canvas": canvas.clear,
            
            # Point operations
            "create_point": canvas.create_point,
            "delete_point": canvas.delete_point,
            
            # Segment operations
            "create_segment": canvas.create_segment,
            "delete_segment": canvas.delete_segment,
            
            # Vector operations
            "create_vector": canvas.create_vector,
            "delete_vector": canvas.delete_vector,
            
            # Triangle operations
            "create_triangle": canvas.create_triangle,
            "delete_triangle": canvas.delete_triangle,
            
            # Rectangle operations
            "create_rectangle": canvas.create_rectangle,
            "delete_rectangle": canvas.delete_rectangle,
            
            # Circle operations
            "create_circle": canvas.create_circle,
            "delete_circle": canvas.delete_circle,
            
            # Ellipse operations
            "create_ellipse": canvas.create_ellipse,
            "delete_ellipse": canvas.delete_ellipse,
            
            # Function operations
            "draw_function": canvas.draw_function,
            "delete_function": canvas.delete_function,
            
            # Object transformations
            "translate_object": canvas.translate_object,
            "rotate_object": canvas.rotate_object,
            
            # Math operations
            "evaluate_expression": ProcessFunctionCalls.evaluate_expression,
            "convert": MathUtil.convert,
            "limit": MathUtil.limit,
            "derive": MathUtil.derivative,
            "integrate": MathUtil.integral,
            "simplify": MathUtil.simplify,
            "expand": MathUtil.expand,
            "factor": MathUtil.factor,
            "solve": MathUtil.solve,
            "solve_system_of_equations": MathUtil.solve_system_of_equations,
            
            # Canvas history
            "undo": canvas.undo,
            "redo": canvas.redo,
            
            # Workspace operations
            "save_workspace": workspace_manager.save_workspace,
            "load_workspace": workspace_manager.load_workspace,
            "list_workspaces": workspace_manager.list_workspaces,
            "delete_workspace": workspace_manager.delete_workspace,
            
            # Colored area operations
            "create_colored_area": canvas.create_colored_area,
            "delete_colored_area": canvas.delete_colored_area,
        }

        # Add testing functions if ai_interface is provided
        if ai_interface is not None:
            functions["run_tests"] = ai_interface.run_tests

        return functions

    @staticmethod
    def get_undoable_functions():
        """Get the tuple of function names that support undo/redo operations.
        
        Returns:
            tuple: Names of functions that can be undone/redone
        """
        return (
            # Canvas operations
            "clear_canvas",
            "reset_canvas",
            
            # Point operations
            "create_point",
            "delete_point",
            
            # Segment operations
            "create_segment",
            "delete_segment",
            
            # Vector operations
            "create_vector", 
            "delete_vector",
            
            # Triangle operations
            "create_triangle",
            "delete_triangle",
            
            # Rectangle operations
            "create_rectangle",
            "delete_rectangle",
            
            # Circle operations
            "create_circle",
            "delete_circle",
            
            # Ellipse operations
            "create_ellipse",
            "delete_ellipse",
            
            # Function operations
            "draw_function",
            "delete_function",
            
            # Object transformations
            "translate_object",
            "rotate_object",
            
            # Colored area operations
            "create_colored_area",
            "delete_colored_area"
        ) 