from drawable import Drawable
from config import default_color
from point import Position


class Cartesian2Axis(Drawable):
    def __init__(self, canvas, color=default_color):
        self.name = "cartesian-2axis-system"
        self.width = canvas.width
        self.height = canvas.height
        self.origin = Position(canvas.center.x, canvas.center.y)  # initial placement on canvas
        self.tick_spacing = 50
        self.previous_tick_spacing = self.tick_spacing  # Track the previous tick spacing to determine zoom level
        self.tick_size = 3
        self.zoom_level = 0
        self.tick_color = color
        self.tick_label_color = "grey"
        self.tick_label_font_size = 8
        self.grid_color = "lightgrey"
        super().__init__(name=self.name, color=color, canvas=canvas)

    @Drawable.canvas.setter
    def canvas(self, value):
        self._canvas = value

    @canvas.getter
    def canvas(self):
        return self._canvas
    
    def _initialize(self):
        self.origin._initialize()
    
    def get_class_name(self):
        return 'Cartesian2Axis'
    
    def draw(self):
        # Draw axes
        self.create_svg_element('line', x1=str(0), y1=str(self.origin.y), x2=str(self.width), y2=str(self.origin.y), stroke=self.color)
        self.create_svg_element('line', x1=str(self.origin.x), y1=str(0), x2=str(self.origin.x), y2=str(self.height), stroke=self.color)
        # Add spaced ticks on the axes
        display_tick_spacing  = self.tick_spacing * self.canvas.scale_factor * 2 ** (-self.zoom_level)
        # Draw ticks on axes
        self._draw_ticks(display_tick_spacing)
        # Draw grid
        self._draw_grid(display_tick_spacing / 2)

    def _draw_ticks(self, step):
        def draw_ticks(axis, step, direction):
            tick_mark = self.origin.x if axis == 'x' else self.origin.y
            boundary = self.width if axis == 'x' else self.height
            tick_size = self.tick_size
            go = lambda: (direction == 1 and tick_mark < boundary) or (direction == -1 and tick_mark > 0)
            while go():
                if axis == 'x':
                    self.create_svg_element('line', x1=str(tick_mark), y1=str(self.origin.y - tick_size), x2=str(tick_mark), y2=str(self.origin.y + tick_size), stroke=self.color)
                    tick_label_text = str(round((tick_mark - self.origin.x) / (self.tick_spacing * self.canvas.scale_factor) * self.tick_spacing, 2))
                    self.create_svg_element('text', x=str(tick_mark + 2), y=str(self.origin.y + tick_size + self.tick_label_font_size), fill=self.tick_label_color, text_content=tick_label_text, text_font_size=self.tick_label_font_size)
                else:
                    self.create_svg_element('line', x1=str(self.origin.x - tick_size), y1=str(tick_mark), x2=str(self.origin.x + tick_size), y2=str(tick_mark), stroke=self.color)
                    tick_label_text = str(round((self.origin.y - tick_mark) / (self.tick_spacing * self.canvas.scale_factor) * self.tick_spacing, 2))
                    self.create_svg_element('text', x=str(self.origin.x + tick_size), y=str(tick_mark - tick_size), fill=self.tick_label_color, text_content=tick_label_text, text_font_size=self.tick_label_font_size)
                tick_mark += step * direction
        for axis in ['x', 'y']:
            for direction in [-1, 1]:
                draw_ticks(axis, step, direction)

    def _draw_grid(self, step):
        def draw_grid_lines(axis, step, direction):
            grid_mark = self.origin.x if axis == 'x' else self.origin.y
            boundary = self.width if axis == 'x' else self.height
            go = lambda: (direction == 1 and grid_mark < boundary) or (direction == -1 and grid_mark > 0)

            while go():
                start_point = Position(0, grid_mark) if axis == 'y' else Position(grid_mark, 0)
                end_point = Position(self.width, grid_mark) if axis == 'y' else Position(grid_mark, self.height)
                self.create_svg_element('line', x1=str(start_point.x), y1=str(start_point.y), x2=str(end_point.x), y2=str(end_point.y), stroke=self.grid_color)
                grid_mark += step * direction
        for axis in ['x', 'y']:
            for direction in [-1, 1]:
                draw_grid_lines(axis, step, direction)

    def _translate(self, offset):
        self.origin._translate(offset)

    def zoom(self):
        if self.canvas:
            # Calculate display tick spacing from zoom level and scale factor
            display_tick_spacing = self.tick_spacing * self.canvas.scale_factor * 2 ** (-self.zoom_level)
            # Check if the display tick spacing is outside the range [previous_tick_spacing / 2, previous_tick_spacing * 2]
            zoom_in = self.canvas.zoom_direction == -1
            if zoom_in and display_tick_spacing > self.previous_tick_spacing * 2:
                # Zooming in, and display tick spacing is more than twice the previous tick spacing
                self.zoom_level += 1
                self.previous_tick_spacing = self.tick_spacing
            elif not zoom_in and display_tick_spacing < self.previous_tick_spacing / 2:
                # Zooming out, and display tick spacing is less than half the previous tick spacing
                self.zoom_level -= 1
                self.previous_tick_spacing = self.tick_spacing
            self.origin.zoom()
    
    def pan(self):
        self._translate(self.canvas.offset)

    def get_state(self):
        state = {"class": self.get_class_name, "args": {"width": self.width, "height": self.height, "tick_spacing": self.tick_spacing}}
        return state