import unittest
from markdown_parser import MarkdownParser


class TestMarkdownParser(unittest.TestCase):
    def setUp(self):
        self.parser = MarkdownParser()

    def test_headers(self):
        """Test all header levels H1-H6."""
        # Test H1
        result = self.parser.parse("# Header 1")
        self.assertIn("<h1>Header 1</h1>", result)
        
        # Test H2
        result = self.parser.parse("## Header 2")
        self.assertIn("<h2>Header 2</h2>", result)
        
        # Test H3
        result = self.parser.parse("### Header 3")
        self.assertIn("<h3>Header 3</h3>", result)
        
        # Test H4
        result = self.parser.parse("#### Header 4")
        self.assertIn("<h4>Header 4</h4>", result)
        
        # Test H5
        result = self.parser.parse("##### Header 5")
        self.assertIn("<h5>Header 5</h5>", result)
        
        # Test H6
        result = self.parser.parse("###### Header 6")
        self.assertIn("<h6>Header 6</h6>", result)

    def test_bold_text(self):
        """Test bold text formatting with both ** and __ syntax."""
        # Test ** syntax
        result = self.parser.parse("This is **bold** text")
        self.assertIn("<strong>bold</strong>", result)
        
        # Test __ syntax
        result = self.parser.parse("This is __bold__ text")
        self.assertIn("<strong>bold</strong>", result)
        
        # Test multiple bold in one line
        result = self.parser.parse("**First** and __second__ bold")
        self.assertIn("<strong>First</strong>", result)
        self.assertIn("<strong>second</strong>", result)

    def test_italic_text(self):
        """Test italic text formatting with both * and _ syntax."""
        # Test * syntax
        result = self.parser.parse("This is *italic* text")
        self.assertIn("<em>italic</em>", result)
        
        # Test _ syntax
        result = self.parser.parse("This is _italic_ text")
        self.assertIn("<em>italic</em>", result)
        
        # Test multiple italic in one line
        result = self.parser.parse("*First* and _second_ italic")
        self.assertIn("<em>First</em>", result)
        self.assertIn("<em>second</em>", result)

    def test_strikethrough_text(self):
        """Test strikethrough text formatting."""
        result = self.parser.parse("This is ~~strikethrough~~ text")
        self.assertIn("<del>strikethrough</del>", result)

    def test_inline_code(self):
        """Test inline code formatting."""
        result = self.parser.parse("This is `inline code` text")
        self.assertIn("<code>inline code</code>", result)

    def test_code_blocks(self):
        """Test code block formatting."""
        code_block = """```python
def hello():
    print("Hello, World!")
```"""
        result = self.parser.parse(code_block)
        self.assertIn("<pre><code>", result)
        self.assertIn("def hello():", result)
        self.assertIn("</code></pre>", result)

    def test_links(self):
        """Test link formatting."""
        result = self.parser.parse("This is a [link](https://example.com) text")
        self.assertIn('<a href="https://example.com">link</a>', result)

    def test_unordered_lists(self):
        """Test unordered list formatting."""
        markdown = """- Item 1
- Item 2
- Item 3"""
        result = self.parser.parse(markdown)
        self.assertIn("<ul>", result)
        self.assertIn("<li>Item 1</li>", result)
        self.assertIn("<li>Item 2</li>", result)
        self.assertIn("<li>Item 3</li>", result)
        self.assertIn("</ul>", result)

    def test_ordered_lists(self):
        """Test ordered list formatting."""
        markdown = """1. First item
2. Second item
3. Third item"""
        result = self.parser.parse(markdown)
        self.assertIn("<ol>", result)
        self.assertIn("<li>First item</li>", result)
        self.assertIn("<li>Second item</li>", result)
        self.assertIn("<li>Third item</li>", result)
        self.assertIn("</ol>", result)

    def test_nested_lists(self):
        """Test nested list formatting."""
        markdown = """- Item 1
  - Nested item 1
  - Nested item 2
- Item 2"""
        result = self.parser.parse(markdown)
        # Should contain nested ul structure
        self.assertIn("<ul>", result)
        self.assertIn("<li>Item 1</li>", result)
        self.assertIn("<li>Nested item 1</li>", result)
        self.assertIn("<li>Nested item 2</li>", result)
        self.assertIn("<li>Item 2</li>", result)

    def test_checkbox_lists(self):
        """Test checkbox list formatting."""
        markdown = """- [x] Completed task
- [ ] Incomplete task
- [x] Another completed task"""
        result = self.parser.parse(markdown)
        # Check for checkbox elements
        self.assertIn('class="checkbox checked"', result)
        self.assertIn('class="checkbox unchecked"', result)
        self.assertIn('class="checkbox-item"', result)
        self.assertIn("Completed task", result)
        self.assertIn("Incomplete task", result)

    def test_tables(self):
        """Test table formatting."""
        markdown = """| Name | Age | City |
|------|-----|------|
| John | 25  | NYC  |
| Jane | 30  | LA   |"""
        result = self.parser.parse(markdown)
        self.assertIn("<table>", result)
        self.assertIn("<th>Name</th>", result)
        self.assertIn("<th>Age</th>", result)
        self.assertIn("<th>City</th>", result)
        self.assertIn("<td>John</td>", result)
        self.assertIn("<td>25</td>", result)
        self.assertIn("<td>NYC</td>", result)
        self.assertIn("</table>", result)

    def test_blockquotes(self):
        """Test blockquote formatting."""
        result = self.parser.parse("> This is a blockquote")
        self.assertIn("<blockquote>This is a blockquote</blockquote>", result)

    def test_horizontal_rules(self):
        """Test horizontal rule formatting."""
        result = self.parser.parse("---")
        self.assertIn("<hr>", result)

    def test_inline_math_expressions(self):
        """Test inline mathematical expressions."""
        result = self.parser.parse("The equation \\(E = mc^2\\) is famous")
        self.assertIn('class="math-inline"', result)
        self.assertIn("\\(E = mc^2\\)", result)

    def test_block_math_expressions(self):
        """Test block mathematical expressions."""
        markdown = """$$
\\int_{0}^{\\infty} e^{-x^2} dx = \\frac{\\sqrt{\\pi}}{2}
$$"""
        result = self.parser.parse(markdown)
        self.assertIn('class="math-block"', result)
        self.assertIn("\\int_{0}^{\\infty}", result)

    def test_mixed_formatting(self):
        """Test multiple formatting elements together."""
        markdown = """# Main Title

This is **bold** and *italic* text with `inline code`.

## Math Section

The famous equation is \\(E = mc^2\\).

### List Example

- Item with **bold** text
- Item with *italic* text
- [Link item](https://example.com)

| Formula | Result |
|---------|--------|
| \\(2 + 2\\) | 4 |
| \\(x^2\\) | Variable |"""
        
        result = self.parser.parse(markdown)
        
        # Check headers
        self.assertIn("<h1>Main Title</h1>", result)
        self.assertIn("<h2>Math Section</h2>", result)
        self.assertIn("<h3>List Example</h3>", result)
        
        # Check formatting
        self.assertIn("<strong>bold</strong>", result)
        self.assertIn("<em>italic</em>", result)
        self.assertIn("<code>inline code</code>", result)
        
        # Check math
        self.assertIn('class="math-inline"', result)
        
        # Check list
        self.assertIn("<ul>", result)
        self.assertIn("<li>Item with", result)
        
        # Check table
        self.assertIn("<table>", result)
        self.assertIn("<th>Formula</th>", result)

    def test_edge_cases(self):
        """Test edge cases and malformed markdown."""
        # Empty string
        result = self.parser.parse("")
        self.assertEqual(result, "")
        
        # Only whitespace
        result = self.parser.parse("   \n  \n  ")
        # Should handle gracefully
        
        # Unmatched formatting
        result = self.parser.parse("**bold without closing")
        # Should not crash
        
        # Nested formatting
        result = self.parser.parse("**bold with *italic* inside**")
        # Should handle reasonably

    def test_multiple_math_expressions(self):
        """Test multiple math expressions in one text."""
        markdown = "First equation \\(x = 1\\) and second $$y = 2$$ then \\(z = 3\\)"
        result = self.parser.parse(markdown)
        
        # Should contain multiple math spans/divs
        math_inline_count = result.count('class="math-inline"')
        math_block_count = result.count('class="math-block"')
        
        self.assertEqual(math_inline_count, 2)  # Two inline expressions
        self.assertEqual(math_block_count, 1)   # One block expression

    def test_table_with_inline_formatting(self):
        """Test tables with inline formatting in cells."""
        markdown = """| **Bold** | *Italic* | `Code` |
|----------|----------|--------|
| **Data** | *Info*   | `var`  |"""
        
        result = self.parser.parse(markdown)
        self.assertIn("<strong>Bold</strong>", result)
        self.assertIn("<em>Italic</em>", result)
        self.assertIn("<code>Code</code>", result)

    def test_list_with_mixed_types(self):
        """Test mixing ordered and unordered lists."""
        markdown = """1. Ordered item 1
2. Ordered item 2

- Unordered item 1
- Unordered item 2"""
        
        result = self.parser.parse(markdown)
        self.assertIn("<ol>", result)
        self.assertIn("</ol>", result)
        self.assertIn("<ul>", result)
        self.assertIn("</ul>", result)

    def test_complex_nested_structure(self):
        """Test complex nested markdown structure."""
        markdown = """## Complex Example

This has:

1. **Bold** ordered item
   - *Italic* nested item
   - Another nested with `code`
2. Second ordered item

### Math Examples

Inline: \\(f(x) = x^2\\)

Block:
$$
\\sum_{i=1}^{n} i = \\frac{n(n+1)}{2}
$$

> Quote with **bold** text

| Function | Derivative |
|----------|------------|
| \\(x^2\\) | \\(2x\\) |
| \\(\\sin x\\) | \\(\\cos x\\) |"""
        
        result = self.parser.parse(markdown)
        
        # Verify all elements are present
        self.assertIn("<h2>Complex Example</h2>", result)
        self.assertIn("<h3>Math Examples</h3>", result)
        self.assertIn("<ol>", result)
        self.assertIn("<ul>", result)
        self.assertIn("<blockquote>", result)
        self.assertIn("<table>", result)
        self.assertIn('class="math-inline"', result)
        self.assertIn('class="math-block"', result)
        self.assertIn("<strong>Bold</strong>", result)
        self.assertIn("<em>Italic</em>", result)
        self.assertIn("<code>code</code>", result)