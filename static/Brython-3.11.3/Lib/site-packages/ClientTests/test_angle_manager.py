import unittest
from unittest.mock import MagicMock, patch

from managers.angle_manager import AngleManager
# Assuming SimpleMock is available in the same directory or accessible via path
# If not, we might need to define a basic version or adjust import.
# For now, let's assume it's similar to the one in test_angle.py
try:
    from .simple_mock import SimpleMock
except ImportError:
    # Basic SimpleMock for fallback if not found in expected location
    class SimpleMock:
        def __init__(self, **kwargs):
            self.__dict__.update(kwargs)
            for key, value in kwargs.items():
                if callable(value):
                    setattr(self, key, MagicMock(wraps=value))
                else:
                    setattr(self, key, value)

        def __call__(self, *args, **kwargs):
            # If the mock object itself is called, and has a 'return_value' or 'side_effect'
            # attribute (typical for MagicMock), use it. Otherwise, do nothing or raise error.
            if hasattr(self, '_mock_return_value'):
                return self._mock_return_value
            if hasattr(self, '_mock_side_effect'):
                return self._mock_side_effect(*args, **kwargs)
            # Default behavior if not configured as a callable mock
            # print(f"Warning: SimpleMock {self.__dict__.get('name', 'Unnamed')} called but not configured as callable.")
            return MagicMock() # Return a new mock to allow chaining if necessary

        def __getattr__(self, name):
            # If an attribute is not found, return a new MagicMock
            # This allows for accessing attributes that were not explicitly set up
            # print(f"Warning: Accessing undefined attribute '{name}' on SimpleMock {self.__dict__.get('name', 'Mock')}. Returning new MagicMock.")
            # Ensure that already set attributes are returned correctly
            if name in self.__dict__:
                return self.__dict__[name]
            val = MagicMock(name=f"{self.__dict__.get('name', 'Mock')}.{name}")
            setattr(self, name, val)
            return val


class TestAngleManager(unittest.TestCase):
    def setUp(self):
        self.canvas_mock = SimpleMock(
            name="CanvasMock",
            undo_redo_manager=SimpleMock(name="UndoRedoManagerMock", archive=MagicMock()),
            draw_enabled=True,
            draw=MagicMock()
        )
        self.drawables_container_mock = SimpleMock(
            name="DrawablesContainerMock",
            Angles=[], # Holds created Angle instances
            add=MagicMock(side_effect=lambda x: self.drawables_container_mock.Angles.append(x))
        )
        self.name_generator_mock = SimpleMock(name="NameGeneratorMock") # Basic mock for now
        
        self.dependency_manager_mock = SimpleMock(
            name="DependencyManagerMock",
            register_dependency=MagicMock(),
            # Add other methods like remove_drawable, unregister_dependency if needed for other tests
        )

        # Mock Point Class Behavior (used by point_manager)
        self.MockPoint = MagicMock(spec=True) # Use spec to ensure it mimics a class
        def mock_point_init(self_point, x, y, name=None, canvas=None, label=None, color=None, size=None, display_type=None, is_visible=True, is_fixed=False):
            self_point.name = name or f"P({x},{y})"
            self_point.x = x
            self_point.y = y
            self_point.original_position = SimpleMock(name=f"{self_point.name}_orig_pos", x=x, y=y) # Crucial for SegmentManager
            self_point.canvas = canvas
            # ... other attributes if needed
        self.MockPoint.side_effect = mock_point_init # This makes MockPoint() behave like a constructor

        self.point_manager_mock = SimpleMock(
            name="PointManagerMock",
            # create_point returns an instance of a mock Point
            create_point=MagicMock(side_effect=lambda x, y, name=None, extra_graphics=True, label=None, color=None, size=None, display_type=None, is_visible=True, is_fixed=False: 
                                   SimpleMock(name=name or f"P({x},{y})", x=x, y=y, 
                                              original_position=SimpleMock(x=x,y=y)))
        )

        # Mock Segment Class Behavior (used by segment_manager)
        self.MockSegment = MagicMock(spec=True)
        def mock_segment_init(self_segment, p1, p2, canvas=None, name=None, label=None, color=None, thickness=None, is_visible=True, has_direction=False):
            self_segment.point1 = p1
            self_segment.point2 = p2
            self_segment.name = name or f"Seg_{p1.name}_{p2.name}"
            self_segment.canvas = canvas
            # ... other attributes
        self.MockSegment.side_effect = mock_segment_init

        self.segment_manager_mock = SimpleMock(
            name="SegmentManagerMock",
            # create_segment returns an instance of a mock Segment
            create_segment=MagicMock(side_effect=lambda x1, y1, x2, y2, name=None, extra_graphics=True:
                                     SimpleMock(name=name or f"S_({x1},{y1})-({x2},{y2})", 
                                                point1=self.point_manager_mock.create_point(x1,y1), 
                                                point2=self.point_manager_mock.create_point(x2,y2)))
        )
        
        self.drawable_manager_proxy_mock = SimpleMock(
            name="DrawableManagerProxyMock",
            create_drawables_from_new_connections=MagicMock()
            # Add get_segment_by_name if AngleManager needs it directly from proxy
        )

        # The actual Angle class will be imported, but we might patch its __init__ for some tests.
        # from drawables.angle import Angle 

        self.angle_manager = AngleManager(
            canvas=self.canvas_mock,
            drawables_container=self.drawables_container_mock,
            name_generator=self.name_generator_mock,
            dependency_manager=self.dependency_manager_mock,
            point_manager=self.point_manager_mock,
            segment_manager=self.segment_manager_mock,
            drawable_manager_proxy=self.drawable_manager_proxy_mock
        )

        # Helper points for tests
        self.p_vertex = self.point_manager_mock.create_point(0, 0, name="V")
        self.p_arm1 = self.point_manager_mock.create_point(10, 0, name="A1")
        self.p_arm2 = self.point_manager_mock.create_point(0, 10, name="A2")
        self.p_arm3 = self.point_manager_mock.create_point(-10, 0, name="A3") # For a different angle

        # Helper segments for tests
        self.seg_VA1 = self.segment_manager_mock.create_segment(self.p_vertex.x, self.p_vertex.y, self.p_arm1.x, self.p_arm1.y, name="VA1")
        self.seg_VA2 = self.segment_manager_mock.create_segment(self.p_vertex.x, self.p_vertex.y, self.p_arm2.x, self.p_arm2.y, name="VA2")
        self.seg_VA3 = self.segment_manager_mock.create_segment(self.p_vertex.x, self.p_vertex.y, self.p_arm3.x, self.p_arm3.y, name="VA3")


    def test_initialization(self):
        self.assertIsNotNone(self.angle_manager.canvas)
        self.assertIsNotNone(self.angle_manager.drawables)
        self.assertIsNotNone(self.angle_manager.point_manager)
        self.assertIsNotNone(self.angle_manager.segment_manager)

    def test_get_angle_by_name_found(self):
        # Add a mock angle to the container
        mock_angle = SimpleMock(name="TestAngle1", segment1=self.seg_VA1, segment2=self.seg_VA2)
        self.drawables_container_mock.Angles.append(mock_angle)
        
        found_angle = self.angle_manager.get_angle_by_name("TestAngle1")
        self.assertIs(found_angle, mock_angle)

    def test_get_angle_by_name_not_found(self):
        found_angle = self.angle_manager.get_angle_by_name("NonExistentAngle")
        self.assertIsNone(found_angle)

    def test_get_angle_by_segments_found(self):
        mock_angle = SimpleMock(name="AngleBySegs", segment1=self.seg_VA1, segment2=self.seg_VA2)
        self.drawables_container_mock.Angles.append(mock_angle)

        # Test finding in original order
        found_angle = self.angle_manager.get_angle_by_segments(self.seg_VA1, self.seg_VA2)
        self.assertIs(found_angle, mock_angle)

        # Test finding in reverse order
        found_angle_reverse = self.angle_manager.get_angle_by_segments(self.seg_VA2, self.seg_VA1)
        self.assertIs(found_angle_reverse, mock_angle)

    def test_get_angle_by_segments_not_found(self):
        # Segments that don't form a known angle in the container
        other_segment = self.segment_manager_mock.create_segment(10,10, 20,20, name="OtherSeg")
        found_angle = self.angle_manager.get_angle_by_segments(self.seg_VA1, other_segment)
        self.assertIsNone(found_angle)

    def test_get_angle_by_points_found(self):
        # Note: Angle stores vertex_point, arm1_point, arm2_point based on its internal logic.
        # For this test, we mock these attributes on the stored angle.
        # These points (v, a1, a2) are the actual points defining the angle's geometry,
        # not necessarily the same instances as the ones used to *search* if those were intermediaries.
        # Here, we assume Angle stores references to the points that make its arms.
        
        # Setup points that an Angle would have derived
        v_obj = SimpleMock(name="V_obj", x=0,y=0)
        a1_obj = SimpleMock(name="A1_obj", x=10,y=0)
        a2_obj = SimpleMock(name="A2_obj", x=0,y=10)

        mock_angle = SimpleMock(
            name="AngleByPoints", 
            vertex_point=v_obj, 
            arm1_point=a1_obj, 
            arm2_point=a2_obj,
            # segment1 and segment2 would be composed of these points
            segment1=SimpleMock(point1=v_obj, point2=a1_obj),
            segment2=SimpleMock(point1=v_obj, point2=a2_obj)
        )
        self.drawables_container_mock.Angles.append(mock_angle)

        # Search using the same point objects
        found_angle = self.angle_manager.get_angle_by_points(v_obj, a1_obj, a2_obj)
        self.assertIs(found_angle, mock_angle)

        # Search with arm points reversed
        found_angle_reverse = self.angle_manager.get_angle_by_points(v_obj, a2_obj, a1_obj)
        self.assertIs(found_angle_reverse, mock_angle)

    def test_get_angle_by_points_not_found_wrong_vertex(self):
        v_obj = SimpleMock(name="V_obj", x=0,y=0)
        a1_obj = SimpleMock(name="A1_obj", x=10,y=0)
        a2_obj = SimpleMock(name="A2_obj", x=0,y=10)
        wrong_v_obj = SimpleMock(name="WrongV_obj", x=1,y=1)

        mock_angle = SimpleMock(name="AngleByPoints", vertex_point=v_obj, arm1_point=a1_obj, arm2_point=a2_obj)
        self.drawables_container_mock.Angles.append(mock_angle)
        
        found_angle = self.angle_manager.get_angle_by_points(wrong_v_obj, a1_obj, a2_obj)
        self.assertIsNone(found_angle)

    def test_get_angle_by_points_not_found_wrong_arm(self):
        v_obj = SimpleMock(name="V_obj", x=0,y=0)
        a1_obj = SimpleMock(name="A1_obj", x=10,y=0)
        a2_obj = SimpleMock(name="A2_obj", x=0,y=10)
        wrong_a3_obj = SimpleMock(name="WrongA3_obj", x=-1,y=-1)

        mock_angle = SimpleMock(name="AngleByPoints", vertex_point=v_obj, arm1_point=a1_obj, arm2_point=a2_obj)
        self.drawables_container_mock.Angles.append(mock_angle)

        found_angle = self.angle_manager.get_angle_by_points(v_obj, a1_obj, wrong_a3_obj)
        self.assertIsNone(found_angle)

    def test_get_angle_by_points_input_points_none(self):
        v_obj = SimpleMock(name="V_obj", x=0,y=0)
        a1_obj = SimpleMock(name="A1_obj", x=10,y=0)
        self.assertIsNone(self.angle_manager.get_angle_by_points(None, a1_obj, a1_obj))
        self.assertIsNone(self.angle_manager.get_angle_by_points(v_obj, None, a1_obj))
        self.assertIsNone(self.angle_manager.get_angle_by_points(v_obj, a1_obj, None))


if __name__ == '__main__':
    unittest.main() 