from browser import document, svg
from config import default_color

class Drawable:
    def __init__(self, color=default_color, canvas=None):
        self.color = color
        self.canvas = canvas
    
    @property
    def color(self):
        return self._color

    @color.setter
    def color(self, value):
        self._color = value

    @property
    def canvas(self):
        return self._canvas

    @canvas.setter
    def canvas(self, value):
        self._canvas = value

    def _initialize(self):
        raise NotImplementedError("Subclasses must implement _initialize method")
        
    def _translate(self, offset):
        raise NotImplementedError("Subclasses must implement _translate method")

    def _translate_towards(self, destination, displacement):
        raise NotImplementedError("Subclasses must implement _translate_towards method")

    def _scale(self, factor):
        raise NotImplementedError("Subclasses must implement _scale method")

    def name(self):
        raise NotImplementedError("Subclasses must implement name method")

    def zoom(self):
        raise NotImplementedError("Subclasses must implement zoom method")

    def pan(self):
        raise NotImplementedError("Subclasses must implement pan method")

    def draw(self):
        raise NotImplementedError("Subclasses must implement draw method")

    def reset(self):
        self._initialize()

    def create_svg_element(self, element_name, **attributes):
        # If text_content is present in attributes, store it separately and remove from attributes
        text_content = attributes.pop('text_content', None)
        text_font_size = attributes.pop('text_font_size', None)
        # If there was a font size, add it to the attributes
        if text_font_size is not None:
            attributes['font-size'] = f'{text_font_size}px'
        # print(f"Creating SVG element '{element_name}' with attributes: {attributes}")  # Debug print statement
        svg_element = getattr(svg, element_name)(**attributes)
        # If there was text content, add it to the svg element
        if text_content is not None:
            svg_element.text = text_content
            # Add a style to prevent text selection
            svg_element.style['user-select'] = 'none'
            svg_element.style['-webkit-user-select'] = 'none'
            svg_element.style['-moz-user-select'] = 'none'
            svg_element.style['-ms-user-select'] = 'none'
        document["math-svg"] <= svg_element
        return svg_element