"""
MatHud Testing Framework Runner

Executes test suites for mathematical functions and canvas operations.
Provides formatted test results for AI analysis and validation of system functionality.

Testing Categories:
    - Graphics drawing capabilities and geometric object creation
    - Mathematical function evaluation and computation accuracy
    - Canvas state management and object interactions
    - Error handling and edge case validation

Key Features:
    - Automated test execution with result aggregation
    - AI-formatted output for integration testing
    - Function call validation using real canvas operations
    - Error tracking and debugging information
    - State isolation between test runs

Dependencies:
    - process_function_calls: Function execution framework for testing
"""

from process_function_calls import ProcessFunctionCalls


class TestRunner:
    """Executes test suites and formats results for AI analysis and validation.
    
    Provides comprehensive testing capabilities for mathematical functions, canvas operations,
    and system integration. Manages test execution state and result formatting for both
    human and AI consumption.
    
    Attributes:
        canvas (Canvas): Canvas instance for testing geometric operations
        available_functions (dict): Function registry for validation testing
        undoable_functions (tuple): Functions that support undo/redo testing
        test_results: Aggregated results from test execution
        internal_failures (list): Collection of test failures for debugging
        internal_errors (list): Collection of test errors for analysis
        internal_tests_run (int): Counter of executed test cases
    """
    def __init__(self, canvas, available_functions, undoable_functions):
        """Initialize test runner with canvas and function registry access.
        
        Sets up testing environment with access to canvas operations and function validation.
        
        Args:
            canvas (Canvas): Canvas instance for testing geometric and mathematical operations
            available_functions (dict): Registry of all available AI functions for testing
            undoable_functions (tuple): Functions that support undo/redo operations
        """
        self.canvas = canvas
        self.available_functions = available_functions
        self.undoable_functions = undoable_functions
        self.test_results = None
        # Initialize to track internal test results
        self._reset_internal_results()

    def _reset_internal_results(self):
        """Reset all internal test result tracking variables."""
        self.internal_failures = []
        self.internal_errors = []
        self.internal_tests_run = 0

    def _test_graphics_drawing(self):
        """Run tests for graphics drawing capabilities."""
        self.internal_tests_run += 1
        try:
            function_calls = self._get_graphics_test_function_calls()
            results = ProcessFunctionCalls.get_results(function_calls, self.available_functions, self.undoable_functions, self.canvas)
            print(f"Results of graphics drawing test: {results}")   # DEBUG
            return results
        except Exception as e:
            error_message = f"Error in graphics drawing test: {str(e)}"
            print(error_message)
            self._add_internal_error('Graphics Drawing Test', error_message)
            return None
            
    def _get_graphics_test_function_calls(self):
        """Return the list of function calls for graphics drawing tests."""
        return [
            {
                "function_name": "create_point",
                "arguments": {"x": -200, "y": 100, "name": "A"}
            },
            {
                "function_name": "create_point",
                "arguments": {"x": 250, "y": -150, "name": "B"}
            },
            {
                "function_name": "create_segment",
                "arguments": {"x1": -200, "y1": 100, "x2": 250, "y2": -150, "name": "AB"}
            },
            {
                "function_name": "create_vector",
                "arguments": {"origin_x": -150, "origin_y": -200, "tip_x": 100, "tip_y": 200, "name": "v1"}
            },
            {
                "function_name": "create_triangle",
                "arguments": {"x1": -100, "y1": -150, "x2": 120, "y2": 130, "x3": 150, "y3": -100, "name": "ABC"}
            },
            {
                "function_name": "create_rectangle",
                "arguments": {"px": -250, "py": 250, "opposite_px": 220, "opposite_py": -220, "name": "Rect1"}
            },
            {
                "function_name": "create_circle",
                "arguments": {"center_x": 0, "center_y": 0, "radius": 150, "name": "Circle1"}
            },
            {
                "function_name": "create_ellipse",
                "arguments": {"center_x": 200, "center_y": -100, "radius_x": 60, "radius_y": 90, "name": "Ellipse1"}
            },
            {
                "function_name": "draw_function",
                "arguments": {"function_string": "100 * sin(x / 50) + 50 * tan(x / 100)", "name": "f1", "left_bound": -300, "right_bound": 300}
            },
            {
                "function_name": "draw_function",
                "arguments": {"function_string": "100 * sin(x / 30)", "name": "f2", "left_bound": -300, "right_bound": 300}
            },
            {
                "function_name": "create_colored_area",
                "arguments": {"drawable1_name": "f1", "drawable2_name": "f2", "color": "lightblue", "opacity": 0.3}
            },
            {
                "function_name": "create_colored_area",
                "arguments": {"drawable1_name": "f2", "drawable2_name": "x_axis", "color": "lightgreen", "opacity": 0.3}
            },
            {
                "function_name": "create_angle",
                "arguments": {"vx": 50, "vy": 50, "p1x": 150, "p1y": 50, "p2x": 50, "p2y": 150, "color": "red", "is_reflex": True}
            },
            {
                "function_name": "create_angle",
                "arguments": {"vx": 200, "vy": 200, "p1x": 300, "p1y": 200, "p2x": 300, "p2y": 300, "color": "blue"}
            },
            {
                "function_name": "create_angle",
                "arguments": {"vx": 350, "vy": 150, "p1x": 450, "p1y": 150, "p2x": 350, "p2y": 50, "color": "green"}
            },
            {
                "function_name": "delete_colored_area",
                "arguments": {"name": "area_f1_f2"}
            },
            {
                "function_name": "clear_canvas",
                "arguments": {}
            },
            {
                "function_name": "undo",
                "arguments": {}
            },
            {
                "function_name": "redo",
                "arguments": {}
            },
            {
                "function_name": "undo",
                "arguments": {}
            }
        ]

    def _test_undoable_functions(self):
        """Test that all undoable functions are available."""
        self.internal_tests_run += 1
        try:
            self._validate_undoable_functions()
            print("All undoable functions are available.")   # DEBUG
            return True
        except Exception as e:
            error_message = f"Error in undoable functions test: {str(e)}"
            print(error_message)
            if not any(failure['test'] == 'Undoable Functions Test' for failure in self.internal_failures):
                self._add_internal_failure('Undoable Functions Test', error_message)
            return False
            
    def _validate_undoable_functions(self):
        """Validate that all undoable functions are in the available functions list."""
        for function_name in self.undoable_functions:
            if function_name not in self.available_functions:
                error_message = f"Function '{function_name}' is not available."
                self._add_internal_failure('Undoable Functions Test', error_message)
                raise Exception(error_message)

    def _add_internal_failure(self, test_name, error_message):
        """Add a failure to the internal failures list."""
        self.internal_failures.append({
            'test': test_name,
            'error': error_message
        })
        
    def _add_internal_error(self, test_name, error_message):
        """Add an error to the internal errors list."""
        self.internal_errors.append({
            'test': test_name,
            'error': error_message
        })

    def run_tests(self):
        """Run unit tests for the graphics and function capabilities."""
        # Reset internal test results
        self._reset_internal_results()
        
        # Run the class unit tests
        print("Running graphics and function tests...")
        self._test_graphics_drawing()
        self._test_undoable_functions()

        try:
            # Run the client-side main tests
            client_results = self._run_client_tests()
            print("Client tests completed.") 
            
            # Set test results by merging client and internal results
            self.test_results = self._merge_test_results(client_results)
            
        except ImportError:
            print("Client tests module not available - skipping additional tests.")
            self.test_results = self._create_results_from_internal_only()
        except Exception as e:
            print(f"Error running client tests: {str(e)}")
            self.test_results = self._create_results_with_client_error(str(e))
            
        return self.test_results
        
    def _run_client_tests(self):
        """Run the client-side tests and return the results."""
        from ClientTests.tests import run_tests
        return run_tests()
        
    def _merge_test_results(self, client_results):
        """Merge client test results with internal test results."""
        if not client_results:
            return self._create_results_from_internal_only()
            
        # Start with the client results
        merged_results = client_results.copy()
        
        # Add internal failures and errors to client test results
        merged_results['failures'].extend(self.internal_failures)
        merged_results['errors'].extend(self.internal_errors)
        
        # Update summary
        merged_results['summary']['tests'] += self.internal_tests_run
        merged_results['summary']['failures'] += len(self.internal_failures)
        merged_results['summary']['errors'] += len(self.internal_errors)
        
        return merged_results
        
    def _create_results_from_internal_only(self):
        """Create test results containing only internal test results."""
        return {
            'failures': self.internal_failures,
            'errors': self.internal_errors,
            'summary': {
                'tests': self.internal_tests_run,
                'failures': len(self.internal_failures),
                'errors': len(self.internal_errors)
            }
        }
        
    def _create_results_with_client_error(self, error_message):
        """Create test results with internal results plus a client test runner error."""
        client_error = {
            'test': 'Client Tests Runner',
            'error': f"Error running client tests: {error_message}"
        }
        
        return {
            'failures': self.internal_failures,
            'errors': self.internal_errors + [client_error],
            'summary': {
                'tests': self.internal_tests_run,
                'failures': len(self.internal_failures),
                'errors': len(self.internal_errors) + 1
            }
        }
            
    def get_test_results(self):
        """Return the most recent test results."""
        return self.test_results

    def format_results_for_ai(self, results):
        """Format test results for the AI in a clean, concise format."""
        if not results:
            return {"tests_run": 0, "failures": 0, "errors": 0, "failing_tests": [], "error_tests": []}
        
        # Create a summary for the AI
        formatted_results = self._create_formatted_results_summary(results)
        
        # Add details of failures and errors
        self._add_formatted_failure_details(formatted_results, results)
        self._add_formatted_error_details(formatted_results, results)
        
        # Log detailed test results to console
        self._log_test_results_to_console(formatted_results)
            
        return formatted_results
        
    def _create_formatted_results_summary(self, results):
        """Create a basic summary of test results for AI consumption."""
        return {
            "tests_run": results['summary']['tests'],
            "failures": results['summary']['failures'],
            "errors": results['summary']['errors'],
            "failing_tests": [],
            "error_tests": []
        }
        
    def _add_formatted_failure_details(self, formatted_results, results):
        """Add failure details to the formatted results."""
        if results['failures']:
            for failure in results['failures']:
                formatted_results["failing_tests"].append({
                    "test": failure['test'],
                    "error": failure['error']
                })
                
    def _add_formatted_error_details(self, formatted_results, results):
        """Add error details to the formatted results."""
        if results['errors']:
            for error in results['errors']:
                formatted_results["error_tests"].append({
                    "test": error['test'],
                    "error": error['error']
                })
                
    def _log_test_results_to_console(self, formatted_results):
        """Log detailed test results to the console for debugging."""
        print("========================= TEST RESULTS =========================")
        print(f"Tests Run: {formatted_results['tests_run']}")
        print(f"Failures: {formatted_results['failures']}")
        print(f"Errors: {formatted_results['errors']}")
        
        if formatted_results['failing_tests']:
            print("\nFAILURES:")
            for i, failure in enumerate(formatted_results['failing_tests'], 1):
                print(f"{i}. {failure['test']}: {failure['error']}")
            
        if formatted_results['error_tests']:
            print("\nERRORS:")
            for i, error in enumerate(formatted_results['error_tests'], 1):
                print(f"{i}. {error['test']}: {error['error']}")
        
        print("===============================================================") 