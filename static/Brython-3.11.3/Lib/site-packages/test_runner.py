from process_function_calls import ProcessFunctionCalls


class TestRunner:
    def __init__(self, canvas, available_functions, undoable_functions):
        self.canvas = canvas
        self.available_functions = available_functions
        self.undoable_functions = undoable_functions

    def _test_graphics_drawing(self):
        """Run tests for graphics drawing capabilities."""
        function_calls = [
            {
                "function_name": "create_point",
                "arguments": {"x": -200, "y": 100, "name": "A"}
            },
            {
                "function_name": "create_point",
                "arguments": {"x": 250, "y": -150, "name": "B"}
            },
            {
                "function_name": "create_segment",
                "arguments": {"x1": -200, "y1": 100, "x2": 250, "y2": -150, "name": "AB"}
            },
            {
                "function_name": "create_vector",
                "arguments": {"origin_x": -150, "origin_y": -200, "tip_x": 100, "tip_y": 200, "name": "v1"}
            },
            {
                "function_name": "create_triangle",
                "arguments": {"x1": -100, "y1": -150, "x2": 120, "y2": 130, "x3": 150, "y3": -100, "name": "ABC"}
            },
            {
                "function_name": "create_rectangle",
                "arguments": {"px": -250, "py": 250, "opposite_px": 220, "opposite_py": -220, "name": "Rect1"}
            },
            {
                "function_name": "create_circle",
                "arguments": {"center_x": 0, "center_y": 0, "radius": 150, "name": "Circle1"}
            },
            {
                "function_name": "create_ellipse",
                "arguments": {"center_x": 200, "center_y": -100, "radius_x": 60, "radius_y": 90, "name": "Ellipse1"}
            },
            {
                "function_name": "draw_function",
                "arguments": {"function_string": "100 * sin(x / 50) + 50 * tan(x / 100)", "name": "f1", "left_bound": -300, "right_bound": 300}
            },
            {
                "function_name": "draw_function",
                "arguments": {"function_string": "100 * sin(x / 30)", "name": "f2", "left_bound": -300, "right_bound": 300}
            },
            {
                "function_name": "create_colored_area",
                "arguments": {"drawable1_name": "f1", "drawable2_name": "f2", "color": "lightblue", "opacity": 0.3}
            },
            {
                "function_name": "create_colored_area",
                "arguments": {"drawable1_name": "f2", "drawable2_name": "x_axis", "color": "lightgreen", "opacity": 0.3}
            },
            {
                "function_name": "delete_colored_area",
                "arguments": {"name": "area_f1_f2"}
            },
            {
                "function_name": "clear_canvas",
                "arguments": {}
            },
            {
                "function_name": "undo",
                "arguments": {}
            },
            {
                "function_name": "redo",
                "arguments": {}
            },
            {
                "function_name": "undo",
                "arguments": {}
            }
        ]
        results = ProcessFunctionCalls.get_results(function_calls, self.available_functions, self.undoable_functions, self.canvas)
        print(f"Results of graphics drawing test: {results}")   # DEBUG
        return results

    def _test_undoable_functions(self):
        """Test that all undoable functions are available."""
        for function_name in self.undoable_functions:
            if function_name not in self.available_functions:
                raise Exception(f"Function '{function_name}' is not available.")
        print("All undoable functions are available.")   # DEBUG

    def run_tests(self):
        """Run unit tests for the graphics and function capabilities."""
        # Run the class unit tests
        print("Running graphics and function tests...")
        self._test_graphics_drawing()
        self._test_undoable_functions()

        try:
            # Run the client-side main tests
            from ClientTests import tests
            tests.run_tests() 
        except ImportError:
            print("Client tests module not available - skipping additional tests.") 