"""
MatHud Ellipse Management System

Manages ellipse creation, retrieval, and deletion for advanced curved geometric visualization.
Handles ellipse operations with center point management, dual radii, and rotation support.

Core Responsibilities:
    - Ellipse Creation: Creates ellipses from center coordinates, radii, and rotation angle
    - Ellipse Retrieval: Lookup by center/radii parameters or ellipse name
    - Ellipse Deletion: Safe removal with proper cleanup
    - Center Point Management: Automatic creation and tracking of ellipse centers

Geometric Properties:
    - Dual-Radius Model: Uses separate horizontal and vertical radius parameters
    - Rotation Support: Handles ellipse orientation through rotation angles
    - Center-Based Construction: Mathematical center point with precise coordinates
    - Geometric Validation: Ensures positive radius values for valid ellipses

Advanced Features:
    - Rotation Capabilities: Supports arbitrary ellipse orientation
    - Collision Detection: Prevents creation of duplicate ellipses
    - Name Parsing: Extracts center point names from ellipse identifiers
    - Point Integration: Seamless integration with point management system

Integration Points:
    - PointManager: Creates and manages ellipse center points
    - DependencyManager: Tracks ellipse relationships with center points
    - Canvas: Handles rendering with rotation and visual updates
    - DrawableManager: Coordinates with other geometric objects

Mathematical Context:
    - Elliptical Geometry: Supports standard ellipse properties and calculations
    - Coordinate System: Works within canvas coordinate space with rotation
    - Semi-Major/Minor Axes: Handles ellipse dimensions through radii parameters
    - Geometric Transformations: Supports rotation and scaling operations

State Management:
    - Undo/Redo: Complete state archiving for ellipse operations
    - Canvas Integration: Immediate visual updates after modifications
    - Dependency Tracking: Maintains relationships with center points
    - Name Generation: Systematic naming for mathematical clarity
"""

from drawables.ellipse import Ellipse
from utils.math_utils import MathUtils

class EllipseManager:
    """
    Manages ellipse drawables for a Canvas.
    
    This class is responsible for:
    - Creating ellipse objects
    - Retrieving ellipse objects by various criteria
    - Deleting ellipse objects
    """
    
    def __init__(self, canvas, drawables_container, name_generator, dependency_manager, point_manager, drawable_manager_proxy):
        """
        Initialize the EllipseManager.
        
        Args:
            canvas: The Canvas object this manager is responsible for
            drawables_container: The container for storing drawables
            name_generator: Generator for drawable names
            dependency_manager: Manager for drawable dependencies
            point_manager: Manager for point drawables
            drawable_manager_proxy: Proxy to the main DrawableManager
        """
        self.canvas = canvas
        self.drawables = drawables_container
        self.name_generator = name_generator
        self.dependency_manager = dependency_manager
        self.point_manager = point_manager
        self.drawable_manager = drawable_manager_proxy
        
    def get_ellipse(self, center_x, center_y, radius_x, radius_y):
        """Get an ellipse by its center coordinates and radii"""
        ellipses = self.drawables.Ellipses
        for ellipse in ellipses:
            if (ellipse.center.original_position.x == center_x and 
                ellipse.center.original_position.y == center_y and 
                ellipse.radius_x == radius_x and 
                ellipse.radius_y == radius_y):
                return ellipse
        return None
        
    def get_ellipse_by_name(self, name):
        """Get an ellipse by its name"""
        ellipses = self.drawables.Ellipses
        for ellipse in ellipses:
            if ellipse.name == name:
                return ellipse
        return None
        
    def create_ellipse(self, center_x, center_y, radius_x, radius_y, rotation_angle=0, name="", extra_graphics=True):
        """Create an ellipse with the specified center, radii, and rotation angle"""
        # Archive before creation
        self.canvas.undo_redo_manager.archive()
        
        # Check if the ellipse already exists
        existing_ellipse = self.get_ellipse(center_x, center_y, radius_x, radius_y)
        if existing_ellipse:
            return existing_ellipse
            
        # Extract point name from ellipse name
        point_names = self.name_generator.split_point_names(name, 1)
        
        # Create center point with the correct name
        center = self.point_manager.create_point(center_x, center_y, point_names[0], extra_graphics=False)
            
        # Create the ellipse
        new_ellipse = Ellipse(center, radius_x, radius_y, self.canvas, rotation_angle=rotation_angle)
        
        # Add to drawables
        self.drawables.add(new_ellipse)
        
        # Register dependencies
        self.dependency_manager.analyze_drawable_for_dependencies(new_ellipse)
        
        # Handle extra graphics if requested
        if extra_graphics:
            self.drawable_manager.create_drawables_from_new_connections()
        
        # Draw the ellipse
        if self.canvas.draw_enabled:
            self.canvas.draw()
            
        return new_ellipse
        
    def delete_ellipse(self, name):
        """Delete an ellipse by its name"""
        ellipse = self.get_ellipse_by_name(name)
        if not ellipse:
            return False
            
        # Archive before deletion
        self.canvas.undo_redo_manager.archive()
        
        # Remove from drawables
        self.drawables.remove(ellipse)
        
        # Redraw
        if self.canvas.draw_enabled:
            self.canvas.draw()
            
        return True 