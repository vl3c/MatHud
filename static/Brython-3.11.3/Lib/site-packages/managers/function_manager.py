from drawables.function import Function
from expression_validator import ExpressionValidator

class FunctionManager:
    """
    Manages function drawables for a Canvas.
    
    This class is responsible for:
    - Creating function objects
    - Retrieving function objects by various criteria
    - Deleting function objects
    """
    
    def __init__(self, canvas, drawables_container, name_generator, dependency_manager):
        """
        Initialize the FunctionManager.
        
        Args:
            canvas: The Canvas object this manager is responsible for
            drawables_container: The container for storing drawables
            name_generator: Generator for drawable names
            dependency_manager: Manager for drawable dependencies
        """
        self.canvas = canvas
        self.drawables = drawables_container
        self.name_generator = name_generator
        self.dependency_manager = dependency_manager
        
    def get_function(self, name):
        """Get a function by its name"""
        functions = self.drawables.Functions
        for function in functions:
            if function.name == name:
                return function
        return None
        
    def draw_function(self, function_string, name, left_bound=None, right_bound=None):
        """Draw a function on the canvas"""
        # Archive before creation or modification
        self.canvas.undo_redo_manager.archive()
        
        # Check if the function already exists
        existing_function = self.get_function(name)
        if existing_function:
            # If it exists, update its expression
            try:
                existing_function.function_string = ExpressionValidator.fix_math_expression(function_string)
                existing_function.function = ExpressionValidator.parse_function_string(function_string, use_mathjs=False)
            except Exception as e:
                raise ValueError(f"Failed to parse function string '{function_string}': {str(e)}")
            # Update the bounds
            existing_function.left_bound = left_bound
            existing_function.right_bound = right_bound
            
            if self.canvas.draw_enabled:
                self.canvas.draw()
            return existing_function
        else:
            # Generate a proper name if needed
            name = self.name_generator.generate_function_name(name)
                
            # Create the function
            new_function = Function(function_string, self.canvas, name=name, left_bound=left_bound, right_bound=right_bound)
            
            # Add to drawables
            self.drawables.add(new_function)
            
            # Draw the function
            if self.canvas.draw_enabled:
                self.canvas.draw()
                
            return new_function
        
    def delete_function(self, name):
        """Delete a function by its name"""
        function = self.get_function(name)
        if not function:
            return False
            
        # Archive before deletion
        self.canvas.undo_redo_manager.archive()
            
        # Remove the function
        self.drawables.remove(function)
            
        # Also delete any colored areas associated with this function
        self.canvas.drawable_manager.delete_colored_areas_for_function(function)
        
        # Redraw the canvas
        if self.canvas.draw_enabled:
            self.canvas.draw()
            
        return True 