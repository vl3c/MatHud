class TransformationsManager:
    """
    Manages transformations of drawable objects on a Canvas.
    
    This class is responsible for:
    - Translating objects
    - Rotating objects
    """
    
    def __init__(self, canvas):
        """
        Initialize the TransformationsManager.
        
        Args:
            canvas: The Canvas object this manager is responsible for
        """
        self.canvas = canvas
    
    def translate_object(self, name, x_offset, y_offset):
        """
        Translates a drawable object by the specified offset.
        
        Args:
            name: Name of the drawable to translate
            x_offset: Horizontal offset to apply
            y_offset: Vertical offset to apply
            
        Returns:
            bool: True if the translation was successful
            
        Raises:
            ValueError: If no drawable with the given name is found
        """
        # Find the drawable first to validate it exists
        drawable = None
        for category in self.canvas.drawables:
            for d in self.canvas.drawables[category]:
                if d.name == name:
                    drawable = d
                    break
            if drawable:
                break
        
        if not drawable:
            raise ValueError(f"No drawable found with name '{name}'")
            
        # Archive current state for undo/redo AFTER finding the object but BEFORE modifying it
        self.canvas.undo_redo_manager.archive()
        
        # Apply translation using the drawable's translate method
        drawable.translate(x_offset, y_offset)
        
        # Redraw the canvas
        if self.canvas.draw_enabled:
            self.canvas.draw()
            
        return True
        
    def rotate_object(self, name, angle):
        """
        Rotates a drawable object by the specified angle.
        
        Args:
            name: Name of the drawable to rotate
            angle: Angle in degrees to rotate the object
            
        Returns:
            bool: True if the rotation was successful
            
        Raises:
            ValueError: If no drawable with the given name is found or if rotation fails
        """
        # Find the drawable first to validate it exists
        drawable = None
        for category in self.canvas.drawables:
            if category in ['Function', 'Point', 'Circle']:
                continue
            for d in self.canvas.drawables[category]:
                if d.name == name:
                    drawable = d
                    break
            if drawable:
                break
        
        if not drawable:
            raise ValueError(f"No drawable found with name '{name}'")
            
        # Archive current state for undo/redo AFTER finding the object but BEFORE modifying it
        self.canvas.undo_redo_manager.archive()
        
        # Apply rotation using the drawable's rotate method
        should_proceed, message = drawable.rotate(angle)
        
        if not should_proceed:
            # Raise an error to be handled by the AI interface
            raise ValueError(message)
            
        # If we got here, the rotation was successful
        # Redraw the canvas
        if self.canvas.draw_enabled:
            self.canvas.draw()
            
        return True 