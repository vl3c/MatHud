from drawables.rectangle import Rectangle
from utils.math_utils import MathUtils

class RectangleManager:
    """
    Manages rectangle drawables for a Canvas.
    
    This class is responsible for:
    - Creating rectangle objects
    - Retrieving rectangle objects by various criteria
    - Deleting rectangle objects
    """
    
    def __init__(self, canvas, drawables_container, name_generator, dependency_manager, 
                 point_manager, segment_manager, drawable_manager_proxy):
        """
        Initialize the RectangleManager.
        
        Args:
            canvas: The Canvas object this manager is responsible for
            drawables_container: The container for storing drawables
            name_generator: Generator for drawable names
            dependency_manager: Manager for drawable dependencies
            point_manager: Manager for point drawables
            segment_manager: Manager for segment drawables
            drawable_manager_proxy: Proxy to the main DrawableManager
        """
        self.canvas = canvas
        self.drawables = drawables_container
        self.name_generator = name_generator
        self.dependency_manager = dependency_manager
        self.point_manager = point_manager
        self.segment_manager = segment_manager
        self.drawable_manager = drawable_manager_proxy
        
    def get_rectangle_by_diagonal_points(self, px, py, opposite_px, opposite_py):
        """Get a rectangle by two diagonal points"""
        rectangles = self.drawables.Rectangles
        
        # Calculate the coordinates of the other two corners based on the diagonal points
        corner1 = (px, py)
        corner2 = (opposite_px, py)
        corner3 = (opposite_px, opposite_py)
        corner4 = (px, opposite_py)
        
        # Iterate over all rectangles
        for rectangle in rectangles:
            segments = [rectangle.segment1, rectangle.segment2, rectangle.segment3, rectangle.segment4]
            rectangle_corners = [(segment.point1.original_position.x, segment.point1.original_position.y) for segment in segments]
            
            # Ensuring all corners are matched, considering rectangles could be defined in any direction
            if all(corner in rectangle_corners for corner in [corner1, corner2, corner3, corner4]):
                return rectangle
                
        return None
        
    def get_rectangle_by_name(self, name):
        """Get a rectangle by its name"""
        rectangles = self.drawables.Rectangles
        for rectangle in rectangles:
            if rectangle.name == name:
                return rectangle
        return None
        
    def create_rectangle(self, px, py, opposite_px, opposite_py, name="", extra_graphics=True):
        """Create a rectangle with the specified diagonal points"""
        # Archive before creation
        self.canvas.undo_redo_manager.archive()
        
        # Check if the rectangle already exists
        existing_rectangle = self.get_rectangle_by_diagonal_points(px, py, opposite_px, opposite_py)
        if existing_rectangle:
            return existing_rectangle
            
        # Extract point names from rectangle name
        point_names = ["", "", "", ""]
        if name:
            point_names = self.name_generator.split_point_names(name, 4)
        
        # Create points first with the correct names
        p1 = self.point_manager.create_point(px, py, point_names[0], extra_graphics=False)
        p2 = self.point_manager.create_point(opposite_px, py, point_names[1], extra_graphics=False)
        p3 = self.point_manager.create_point(opposite_px, opposite_py, point_names[2], extra_graphics=False)
        p4 = self.point_manager.create_point(px, opposite_py, point_names[3], extra_graphics=False)
        
        # Create segments using the points
        s1 = self.segment_manager.create_segment(p1.original_position.x, p1.original_position.y, 
                                              p2.original_position.x, p2.original_position.y, 
                                              extra_graphics=False)
        s2 = self.segment_manager.create_segment(p2.original_position.x, p2.original_position.y, 
                                              p3.original_position.x, p3.original_position.y, 
                                              extra_graphics=False)
        s3 = self.segment_manager.create_segment(p3.original_position.x, p3.original_position.y, 
                                              p4.original_position.x, p4.original_position.y, 
                                              extra_graphics=False)
        s4 = self.segment_manager.create_segment(p4.original_position.x, p4.original_position.y, 
                                              p1.original_position.x, p1.original_position.y, 
                                              extra_graphics=False)
        
        # Create the rectangle
        new_rectangle = Rectangle(s1, s2, s3, s4, self.canvas)
        
        # Add to drawables
        self.drawables.add(new_rectangle)
        
        # Register dependencies
        self.dependency_manager.analyze_drawable_for_dependencies(new_rectangle)
        
        # Handle extra graphics if requested
        if extra_graphics:
            self.canvas._create_drawables_from_new_connections()
        
        # Draw the rectangle
        if self.canvas.draw_enabled:
            self.canvas.draw()
            
        return new_rectangle
        
    def delete_rectangle(self, name):
        """Delete a rectangle by its name"""
        rectangle = self.get_rectangle_by_name(name)
        if not rectangle:
            return False
            
        # Archive before deletion
        self.canvas.undo_redo_manager.archive()
        
        # Remove from drawables
        self.drawables.remove(rectangle)
        
        # Delete all 4 segments
        self.segment_manager.delete_segment(rectangle.segment1.point1.original_position.x, rectangle.segment1.point1.original_position.y, 
                                          rectangle.segment1.point2.original_position.x, rectangle.segment1.point2.original_position.y)
        self.segment_manager.delete_segment(rectangle.segment2.point1.original_position.x, rectangle.segment2.point1.original_position.y, 
                                          rectangle.segment2.point2.original_position.x, rectangle.segment2.point2.original_position.y)
        self.segment_manager.delete_segment(rectangle.segment3.point1.original_position.x, rectangle.segment3.point1.original_position.y, 
                                          rectangle.segment3.point2.original_position.x, rectangle.segment3.point2.original_position.y)
        self.segment_manager.delete_segment(rectangle.segment4.point1.original_position.x, rectangle.segment4.point1.original_position.y, 
                                          rectangle.segment4.point2.original_position.x, rectangle.segment4.point2.original_position.y)
        
        # Redraw
        if self.canvas.draw_enabled:
            self.canvas.draw()
            
        return True 