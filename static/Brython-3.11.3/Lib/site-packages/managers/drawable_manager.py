from managers.point_manager import PointManager
from managers.segment_manager import SegmentManager
from managers.vector_manager import VectorManager
from managers.triangle_manager import TriangleManager
from managers.function_manager import FunctionManager
from managers.circle_manager import CircleManager
from managers.ellipse_manager import EllipseManager
from managers.rectangle_manager import RectangleManager
from managers.colored_area_manager import ColoredAreaManager
from managers.drawable_manager_proxy import DrawableManagerProxy
from name_generator.drawable import DrawableNameGenerator
from managers.drawable_dependency_manager import DrawableDependencyManager
from managers.drawables_container import DrawablesContainer

class DrawableManager:
    """
    Manages drawable objects for a Canvas.
    
    This class coordinates specialized managers for each drawable type:
    - Points
    - Segments
    - Vectors
    - Triangles
    - Functions
    - Circles
    - Ellipses
    - Rectangles
    - Colored Areas
    """
    
    def __init__(self, canvas):
        """
        Initialize the DrawableManager.
        
        Args:
            canvas: The Canvas object this manager is responsible for
        """
        self.canvas = canvas
        self.name_generator = DrawableNameGenerator(canvas)
        self.drawables = DrawablesContainer()
        
        # Create a proxy BEFORE dependency manager
        self.proxy = DrawableManagerProxy(self)
        
        # Instantiate DependencyManager with just the proxy
        self.dependency_manager = DrawableDependencyManager(drawable_manager_proxy=self.proxy)
        
        # Initialize specialized managers with the proxy
        self.point_manager = PointManager(
            canvas, self.drawables, self.name_generator, self.dependency_manager, self.proxy
        )
        
        self.segment_manager = SegmentManager(
            canvas, self.drawables, self.name_generator, self.dependency_manager, 
            self.point_manager, self.proxy
        )
        
        self.vector_manager = VectorManager(
            canvas, self.drawables, self.name_generator, self.dependency_manager, 
            self.point_manager, self.proxy
        )
        
        self.triangle_manager = TriangleManager(
            canvas, self.drawables, self.name_generator, self.dependency_manager, 
            self.point_manager, self.segment_manager, self.proxy
        )
        
        self.function_manager = FunctionManager(
            canvas, self.drawables, self.name_generator, self.dependency_manager, self.proxy
        )
        
        self.circle_manager = CircleManager(
            canvas, self.drawables, self.name_generator, self.dependency_manager, 
            self.point_manager, self.proxy
        )
        
        self.ellipse_manager = EllipseManager(
            canvas, self.drawables, self.name_generator, self.dependency_manager, 
            self.point_manager, self.proxy
        )
        
        self.rectangle_manager = RectangleManager(
            canvas, self.drawables, self.name_generator, self.dependency_manager,
            self.point_manager, self.segment_manager, self.proxy
        )
        
        self.colored_area_manager = ColoredAreaManager(
            canvas, self.drawables, self.name_generator, self.dependency_manager, self.proxy
        )
        
        # No need for the loop that sets drawable_manager anymore
        # The proxy handles forwarding calls to the appropriate managers
        
    # ------------------- General Drawable Methods -------------------
    
    def get_drawables(self):
        """Get all drawables as a flat list"""
        return self.drawables.get_all()
    
    # ------------------- Point Methods -------------------
    
    def get_point(self, x, y):
        """Get a point at the specified coordinates"""
        return self.point_manager.get_point(x, y)
        
    def get_point_by_name(self, name):
        """Get a point by its name"""
        return self.point_manager.get_point_by_name(name)
        
    def create_point(self, x, y, name="", extra_graphics=True):
        """Create a new point at the specified coordinates"""
        return self.point_manager.create_point(x, y, name, extra_graphics)
        
    def delete_point(self, x, y):
        """Delete a point at the specified coordinates"""
        return self.point_manager.delete_point(x, y)
        
    def delete_point_by_name(self, name):
        """Delete a point by its name"""
        return self.point_manager.delete_point_by_name(name)
    
    # ------------------- Segment Methods -------------------
    
    def get_segment_by_coordinates(self, x1, y1, x2, y2):
        """Get a segment by its endpoint coordinates"""
        return self.segment_manager.get_segment_by_coordinates(x1, y1, x2, y2)
        
    def get_segment_by_name(self, name):
        """Get a segment by its name"""
        return self.segment_manager.get_segment_by_name(name)
        
    def get_segment_by_points(self, p1, p2):
        """Get a segment by its endpoint points"""
        return self.segment_manager.get_segment_by_points(p1, p2)
        
    def create_segment(self, x1, y1, x2, y2, name="", extra_graphics=True):
        """Create a new segment between the specified points"""
        return self.segment_manager.create_segment(x1, y1, x2, y2, name, extra_graphics)
        
    def delete_segment(self, x1, y1, x2, y2, delete_children=True, delete_parents=False):
        """Delete a segment at the specified coordinates"""
        return self.segment_manager.delete_segment(x1, y1, x2, y2, delete_children, delete_parents)
        
    def delete_segment_by_name(self, name, delete_children=True, delete_parents=False):
        """Delete a segment by its name"""
        return self.segment_manager.delete_segment_by_name(name, delete_children, delete_parents)
    
    # ------------------- Vector Methods -------------------
    
    def get_vector(self, origin_x, origin_y, tip_x, tip_y):
        """Get a vector by its origin and tip coordinates"""
        return self.vector_manager.get_vector(origin_x, origin_y, tip_x, tip_y)
        
    def create_vector(self, origin_x, origin_y, tip_x, tip_y, name="", extra_graphics=True):
        """Create a new vector with the specified origin and tip"""
        return self.vector_manager.create_vector(origin_x, origin_y, tip_x, tip_y, name, extra_graphics)
        
    def delete_vector(self, origin_x, origin_y, tip_x, tip_y):
        """Delete a vector with the specified origin and tip"""
        return self.vector_manager.delete_vector(origin_x, origin_y, tip_x, tip_y)
    
    # ------------------- Triangle Methods -------------------
    
    def get_triangle(self, x1, y1, x2, y2, x3, y3):
        """Get a triangle by its vertex coordinates"""
        return self.triangle_manager.get_triangle(x1, y1, x2, y2, x3, y3)
        
    def create_triangle(self, x1, y1, x2, y2, x3, y3, name="", extra_graphics=True):
        """Create a new triangle with the specified vertices"""
        return self.triangle_manager.create_triangle(x1, y1, x2, y2, x3, y3, name, extra_graphics)
        
    def delete_triangle(self, x1, y1, x2, y2, x3, y3):
        """Delete a triangle with the specified vertices"""
        return self.triangle_manager.delete_triangle(x1, y1, x2, y2, x3, y3)
    
    # ------------------- Function Methods -------------------
    
    def get_function(self, name):
        """Get a function by its name"""
        return self.function_manager.get_function(name)
        
    def draw_function(self, function_string, name, left_bound=None, right_bound=None):
        """Create a new function with the specified expression"""
        return self.function_manager.draw_function(function_string, name, left_bound, right_bound)
        
    def delete_function(self, name):
        """Delete a function by its name"""
        return self.function_manager.delete_function(name)
    
    # ------------------- Circle Methods -------------------
    
    def get_circle(self, center_x, center_y, radius):
        """Get a circle by its center coordinates and radius"""
        return self.circle_manager.get_circle(center_x, center_y, radius)
        
    def get_circle_by_name(self, name):
        """Get a circle by its name"""
        return self.circle_manager.get_circle_by_name(name)
        
    def create_circle(self, center_x, center_y, radius, name="", extra_graphics=True):
        """Create a new circle with the specified center and radius"""
        return self.circle_manager.create_circle(center_x, center_y, radius, name, extra_graphics)
        
    def delete_circle(self, name):
        """Delete a circle by its name"""
        return self.circle_manager.delete_circle(name)
    
    # ------------------- Ellipse Methods -------------------
    
    def get_ellipse(self, center_x, center_y, radius_x, radius_y):
        """Get an ellipse by its center coordinates and radii"""
        return self.ellipse_manager.get_ellipse(center_x, center_y, radius_x, radius_y)
        
    def get_ellipse_by_name(self, name):
        """Get an ellipse by its name"""
        return self.ellipse_manager.get_ellipse_by_name(name)
        
    def create_ellipse(self, center_x, center_y, radius_x, radius_y, rotation_angle=0, name="", extra_graphics=True):
        """Create a new ellipse with the specified center, radii, and rotation"""
        return self.ellipse_manager.create_ellipse(center_x, center_y, radius_x, radius_y, rotation_angle, name, extra_graphics)
        
    def delete_ellipse(self, name):
        """Delete an ellipse by its name"""
        return self.ellipse_manager.delete_ellipse(name)
    
    # ------------------- Rectangle Methods -------------------
    
    def get_rectangle_by_diagonal_points(self, px, py, opposite_px, opposite_py):
        """Get a rectangle by its diagonal points"""
        return self.rectangle_manager.get_rectangle_by_diagonal_points(px, py, opposite_px, opposite_py)
        
    def get_rectangle_by_name(self, name):
        """Get a rectangle by its name"""
        return self.rectangle_manager.get_rectangle_by_name(name)
        
    def create_rectangle(self, px, py, opposite_px, opposite_py, name="", extra_graphics=True):
        """Create a new rectangle with the specified diagonal points"""
        return self.rectangle_manager.create_rectangle(px, py, opposite_px, opposite_py, name, extra_graphics)
        
    def delete_rectangle(self, name):
        """Delete a rectangle by its name"""
        return self.rectangle_manager.delete_rectangle(name)
    
    # ------------------- Colored Area Methods -------------------
    
    def create_colored_area(self, drawable1_name, drawable2_name=None, left_bound=None, right_bound=None, color="lightblue", opacity=0.3):
        """Create a new colored area between drawables"""
        return self.colored_area_manager.create_colored_area(drawable1_name, drawable2_name, left_bound, right_bound, color, opacity)
        
    def delete_colored_area(self, name):
        """Delete a colored area by its name"""
        return self.colored_area_manager.delete_colored_area(name)
        
    def delete_colored_areas_for_function(self, func):
        """Delete all colored areas associated with a function"""
        return self.colored_area_manager.delete_colored_areas_for_function(func)
        
    def delete_colored_areas_for_segment(self, segment):
        """Delete all colored areas associated with a segment"""
        return self.colored_area_manager.delete_colored_areas_for_segment(segment)
        
    def get_colored_areas_for_drawable(self, drawable):
        """Get all colored areas associated with a drawable"""
        return self.colored_area_manager.get_colored_areas_for_drawable(drawable)
        
    def update_colored_area_style(self, name, color=None, opacity=None):
        """Update the style of a colored area"""
        return self.colored_area_manager.update_colored_area_style(name, color, opacity)

    def create_drawables_from_new_connections(self):
        # Call the method on the TriangleManager
        self.triangle_manager.create_new_triangles_from_connected_segments()

    # The transformation methods have been moved to TransformationsManager
    # def translate_object(self, name, x_offset, y_offset):
    #     ...
    # def rotate_object(self, name, angle):
    #     ... 