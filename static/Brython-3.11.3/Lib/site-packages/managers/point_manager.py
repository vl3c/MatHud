from drawables.point import Point
from utils.math_utils import MathUtils

class PointManager:
    """
    Manages point drawables for a Canvas.
    
    This class is responsible for:
    - Creating point objects
    - Retrieving point objects by various criteria
    - Deleting point objects
    """
    
    def __init__(self, canvas, drawables_container, name_generator, dependency_manager, drawable_manager_proxy):
        """
        Initialize the PointManager.
        
        Args:
            canvas: The Canvas object this manager is responsible for
            drawables_container: The container for storing drawables
            name_generator: Generator for drawable names
            dependency_manager: Manager for drawable dependencies
            drawable_manager_proxy: Proxy to the main DrawableManager
        """
        self.canvas = canvas
        self.drawables = drawables_container
        self.name_generator = name_generator
        self.dependency_manager = dependency_manager
        self.drawable_manager = drawable_manager_proxy
        
    def get_point(self, x, y):
        """Get a point at the specified coordinates"""
        for point in self.drawables.Points:
            if MathUtils.point_matches_coordinates(point, x, y):
                return point
        return None
        
    def get_point_by_name(self, name):
        """Get a point by its name"""
        for point in self.drawables.Points:
            if point.name == name:
                return point
        return None
        
    def create_point(self, x, y, name="", extra_graphics=True):
        """
        Create a new point at the specified coordinates
        
        Args:
            x: x-coordinate
            y: y-coordinate
            name: Optional name for the point
            extra_graphics: Whether to create additional graphics (e.g. split segments)
            
        Returns:
            Point: The newly created point
        """
        # Archive before creation for undo functionality
        self.canvas.undo_redo_manager.archive()
        
        # Check if a point already exists at these coordinates
        existing_point = self.get_point(x, y)
        if existing_point:
            return existing_point
            
        # Generate a name
        name = self.name_generator.generate_point_name(name)
        
        # Create the new point
        new_point = Point(x=x, y=y, canvas=self.canvas, name=name)
        
        # Add to drawables
        self.drawables.add(new_point)
        
        # Handle extra graphics - splits segments and creates connections
        if extra_graphics:
            self.canvas._split_segments_with_point(x, y)
            self.canvas._create_drawables_from_new_connections()
        
        # Draw the point if draw_enabled is True
        if self.canvas.draw_enabled:
            self.canvas.draw()
            
        return new_point
        
    def delete_point(self, x, y):
        """Delete a point at the specified coordinates"""
        point = self.get_point(x, y)
        if not point:
            return False
            
        # Archive before deletion
        self.canvas.undo_redo_manager.archive()
            
        # Delete dependencies first
        self.canvas._delete_point_dependencies(x, y)
        
        # Now remove the point itself
        self.drawables.remove(point)
            
        # Redraw the canvas
        if self.canvas.draw_enabled:
            self.canvas.draw()
            
        return True
        
    def delete_point_by_name(self, name):
        """Delete a point by its name"""
        point = self.get_point_by_name(name)
        if not point:
            return False
            
        return self.delete_point(point.original_position.x, point.original_position.y) 