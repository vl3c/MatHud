from drawables.vector import Vector
from utils.math_utils import MathUtils

class VectorManager:
    """
    Manages vector drawables for a Canvas.
    
    This class is responsible for:
    - Creating vector objects
    - Retrieving vector objects by various criteria
    - Deleting vector objects
    """
    
    def __init__(self, canvas, drawables_container, name_generator, dependency_manager, point_manager):
        """
        Initialize the VectorManager.
        
        Args:
            canvas: The Canvas object this manager is responsible for
            drawables_container: The container for storing drawables
            name_generator: Generator for drawable names
            dependency_manager: Manager for drawable dependencies
            point_manager: Manager for point drawables
        """
        self.canvas = canvas
        self.drawables = drawables_container
        self.name_generator = name_generator
        self.dependency_manager = dependency_manager
        self.point_manager = point_manager
        
    def get_vector(self, x1, y1, x2, y2):
        """Get a vector by its origin and tip coordinates"""
        vectors = self.drawables.Vectors
        for vector in vectors:
            if (MathUtils.point_matches_coordinates(vector.origin, x1, y1) and 
                MathUtils.point_matches_coordinates(vector.tip, x2, y2)):
                return vector
        return None
        
    def create_vector(self, origin_x, origin_y, tip_x, tip_y, name="", extra_graphics=True):
        """Create a vector from origin to tip"""
        # Check if the vector already exists
        existing_vector = self.get_vector(origin_x, origin_y, tip_x, tip_y)
        if existing_vector:
            return existing_vector
            
        # Extract point names from vector name
        point_names = ["", ""]
        if name:
            point_names = self.name_generator.split_point_names(name, 2)
        
        # Create or get the origin and tip points
        origin = self.point_manager.create_point(origin_x, origin_y, name=point_names[0], extra_graphics=False)
        tip = self.point_manager.create_point(tip_x, tip_y, name=point_names[1], extra_graphics=False)
        
        # Create the new vector
        new_vector = Vector(origin, tip, canvas=self.canvas)
        
        # Add to drawables
        self.drawables.add(new_vector)
        
        if extra_graphics:
            self.canvas._create_drawables_from_new_connections()
            
        if self.canvas.draw_enabled:
            self.canvas.draw()
            
        return new_vector
        
    def delete_vector(self, origin_x, origin_y, tip_x, tip_y):
        """Delete a vector by its origin and tip coordinates"""
        # Find the vector that matches these coordinates
        vectors = self.drawables.Vectors
        for vector in vectors.copy():
            if (MathUtils.point_matches_coordinates(vector.origin, origin_x, origin_y) and
                MathUtils.point_matches_coordinates(vector.tip, tip_x, tip_y)):
                # Archive before deletion
                self.canvas.undo_redo_manager.archive()
                
                # Remove the vector's segment if it's not used by other objects
                if hasattr(vector, 'segment'):
                    segment = vector.segment
                    p1x = segment.point1.original_position.x
                    p1y = segment.point1.original_position.y
                    p2x = segment.point2.original_position.x
                    p2y = segment.point2.original_position.y
                    self.canvas.drawable_manager.delete_segment(p1x, p1y, p2x, p2y)
                
                # Remove the vector
                self.drawables.remove(vector)
                
                # Redraw
                if self.canvas.draw_enabled:
                    self.canvas.draw()
                    
                return True
        return False 