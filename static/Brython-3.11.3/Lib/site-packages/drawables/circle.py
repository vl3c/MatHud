from constants import default_color
from copy import deepcopy
from drawables.drawable import Drawable
from math_util import MathUtil


class Circle(Drawable):
    def __init__(self, center_point, radius, canvas, color=default_color):
        self.center = center_point
        self.radius = radius
        self.circle_formula = self._calculate_circle_algebraic_formula()
        name = f"{self.center.name}({str(self.radius)})"
        super().__init__(name=name, color=color, canvas=canvas)
        self._initialize()

    @Drawable.canvas.setter
    def canvas(self, value):
        self._canvas = value
        self.center.canvas = value

    @canvas.getter
    def canvas(self):
        return self._canvas

    def get_class_name(self):
        return 'Circle'

    def draw(self):
        radius = self.drawn_radius
        x, y = self.center.x, self.center.y
        self.create_svg_element('circle', cx=str(x), cy=str(y), r=str(radius), fill="none", stroke=self.color)

    def _initialize(self):
        self.drawn_radius = self.radius * self.canvas.scale_factor
        self.center._initialize()

    def _calculate_circle_algebraic_formula(self):
        x = self.center.original_position.x
        y = self.center.original_position.y
        r = self.radius
        circle_formula = MathUtil.get_circle_formula(x, y, r)
        return circle_formula

    def zoom(self):
        self.drawn_radius = self.radius * self.canvas.scale_factor
    
    def pan(self):
        pass   # Panning is done by the canvas for the center point 
        
    def get_state(self):
        radius = self.radius
        center = self.center.name
        state = {"name": self.name, "args": {"center": center, "radius": radius, "circle_formula": self.circle_formula}}
        return state

    def __deepcopy__(self, memo):
        if id(self) in memo:
            return memo[id(self)]
        # Deep copy the center point
        new_center = deepcopy(self.center, memo)
        # Create a new Circle instance with the copied center point and other properties
        new_circle = Circle(new_center, self.radius, canvas=self.canvas, color=self.color)
        memo[id(self)] = new_circle
        return new_circle

    def translate(self, x_offset, y_offset):
        self.center.original_position.x += x_offset
        self.center.original_position.y += y_offset
        self._initialize()

    def rotate(self, angle):
        pass 