from constants import default_color, default_point_size
from copy import deepcopy
from drawables.drawable import Drawable
from drawables.point import Point
from drawables.segment import Segment
import math_util
import math


class Vector(Drawable):
    def __init__(self, origin, tip, canvas, color=default_color):
        self.segment = Segment(origin, tip, canvas=canvas, color=color)
        name = self.segment.name
        super().__init__(name=name, color=color, canvas=canvas)
        self._initialize()

    @Drawable.canvas.setter
    def canvas(self, value):
        self._canvas = value
        self.segment.canvas = value

    @canvas.getter
    def canvas(self):
        return self._canvas
    
    def get_class_name(self):
        return 'Vector'

    def _initialize(self):
        self.segment._initialize()

    def _draw_tip_triangle(self):
        # Calculate the triangle points
        tip = self.segment.point2
        origin = self.segment.point1
        dx = tip.x - origin.x
        dy = tip.y - origin.y
        angle = math.atan2(dy, dx)
        side_length = default_point_size * 4  # Adjust to change the size of the tip
        half_base = side_length / 2
        height = math.sqrt(side_length**2 - half_base**2)
        # Calculate the triangle points
        x1, y1 = tip.x, tip.y
        x2, y2 = tip.x - height * math.cos(angle) - half_base * math.sin(angle), tip.y - height * math.sin(angle) + half_base * math.cos(angle)
        x3, y3 = tip.x - height * math.cos(angle) + half_base * math.sin(angle), tip.y - height * math.sin(angle) - half_base * math.cos(angle)
        points = f'{x1},{y1} {x2},{y2} {x3},{y3}'
        self.create_svg_element('polygon', points=points, fill=self.color, stroke=self.color)

    def draw(self):
        self.segment.draw()
        self._draw_tip_triangle()

    def zoom(self):
        pass   # Zooming is done by the canvas for the segment points
    
    def pan(self):
        pass   # Panning is done by the canvas for the segment points
      
    def get_state(self):
        origin = self.segment.point1.name
        tip = self.segment.point2.name
        state = {"name": self.name, "args": {"origin": origin, "tip": tip, "line_formula": self.segment.line_formula}}
        return state
    
    def __deepcopy__(self, memo):
        # Check if the vector has already been deep copied
        if id(self) in memo:
            return memo[id(self)]
        # Deepcopy the origin and tip points that define the vector
        new_origin = deepcopy(self.segment.point1, memo)
        new_tip = deepcopy(self.segment.point2, memo)
        # Create a new Vector instance with the deep-copied points
        new_vector = Vector(new_origin, new_tip, self.canvas, color=self.color)
        # Store the newly created vector in the memo dictionary
        memo[id(self)] = new_vector
        return new_vector

    def translate(self, x_offset, y_offset):
        self.segment.translate(x_offset, y_offset)
        self._initialize()

    def rotate(self, angle):
        """Rotate the vector around its origin by the given angle in degrees"""
        # Use segment's rotation method to rotate the line portion
        should_proceed, message = self.segment.rotate(angle)
        if not should_proceed:
            return False, message
            
        # Initialize to update any dependent properties (like the tip triangle)
        self._initialize()
        return True, None 