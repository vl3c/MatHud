from constants import successful_call_message

class ResultValidator:
    """Handles validation of function call results."""
    
    @staticmethod
    def validate_results(results):
        """
        Validates that results have the correct structure, regardless of whether they contain errors.
        
        Args:
            results: Dictionary of results to validate
            
        Returns:
            bool: True if the results have the correct structure, False otherwise
        """
        allowed_types = (str, int, float, bool)
        if not isinstance(results, dict):
            return False
        print(f"Validating results: {results}")
        return all(
            k and isinstance(k, str) and 
            isinstance(v, allowed_types)
            for k, v in results.items()
        )
    
    @staticmethod
    def is_successful_result(value):
        """
        Checks if a result value represents a successful computation (not an error or empty).
        
        Args:
            value: The result value to check
            
        Returns:
            bool: True if the result is successful, False otherwise
        """
        return not (isinstance(value, str) and 
                   (value in [successful_call_message, ""] or 
                    value.startswith("Error:"))) 