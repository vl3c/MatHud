from browser import document
from point import Position, Point
from math_geometry import Segment, Vector, Triangle
from cartesian_system_2axis import Cartesian2Axis

class Canvas:
    def __init__(self):
        self.drawables = []
        math_viewport = document['math-svg'].getBoundingClientRect()
        self.width = math_viewport.width
        self.height = math_viewport.height
        self.center = Position(self.width / 2, self.height / 2)
        self.scale_factor = 1  # Default scale factor is 1 (no scaling)
        self.zoom_point = Position(0, 0)  # Default zoom point is at origin
        self.zoom_direction = 0  # Default zoom direction is 0 (no zoom)
        self.zoom_step = 0.1  # Default zoom step is 0.1 (10%)
        self.dragging = False
        self.offset = Position(0, 0)  # Default offset is 0
        self.cartesian2axis = Cartesian2Axis(self)
        self.cartesian2axis.origin = Point(x=0, y=0, canvas=self, name="cartesian-origin")
        self.cartesian2axis.draw()

    def add_drawable(self, drawable):
        drawable.canvas = self  # Set the drawable's canvas reference
        self.drawables.append(drawable)

    def draw(self, apply_zoom=False):
        svg_container = document["math-svg"]
        svg_container.clear()
        self._draw_cartesian(apply_zoom)
        for drawable in self.drawables:
            drawable.pan()
            if apply_zoom:
                drawable.zoom()
            drawable.draw()  # Draw each drawable
        self.offset = Position(0, 0)  # Reset the offset

    def _draw_cartesian(self, apply_zoom=False):
        self.cartesian2axis.pan()
        if apply_zoom:
            self.cartesian2axis.zoom()
        self.cartesian2axis.draw()

    def clear(self):
        for drawable in self.drawables:
            drawable.canvas = None  # Clear the drawable's canvas reference
        self.drawables = []  # Clear the list of drawables

    def reset(self):
        self.scale_factor = 1
        self.offset = Position(0, 0)
        self.zoom_direction = 0
        for drawable in self.drawables:
            drawable.reset()
    
    def get_drawables_state(self):
        state = []
        for drawable in self.drawables:
            state.append(drawable.get_state())
        return state
    
    def _point_matches_coords(self, point, x, y):
        return point.original_position.x == x and point.original_position.y == y

    def _segment_matches_coords(self, segment, x1, y1, x2, y2):
        return (self._point_matches_coords(segment.point1, x1, y1) and self._point_matches_coords(segment.point2, x2, y2)) or \
               (self._point_matches_coords(segment.point1, x2, y2) and self._point_matches_coords(segment.point2, x1, y1))

    def _segment_has_point(self, segment, x, y):
            return self._point_matches_coords(segment.point1, x, y) or self._point_matches_coords(segment.point2, x, y)

    def _delete_point_dependencies(self, x, y):
        to_remove = []  # list of drawables to remove
        for drawable in self.drawables:
            if drawable.get_class_name() == 'Segment' and self._segment_has_point(drawable, x, y):
                to_remove.append(drawable)
            elif drawable.get_class_name() == 'Vector' and self._segment_has_point(drawable.segment, x, y):
                to_remove.append(drawable)
            elif drawable.get_class_name() == 'Triangle' and any(self._segment_has_point(segment, x, y) for segment in [drawable.segment1, drawable.segment2, drawable.segment3]):
                to_remove.append(drawable)
        # Remove all drawables marked for removal
        for drawable in to_remove:
            self.drawables.remove(drawable)

    def _delete_segment_dependencies(self, x1, y1, x2, y2):
        for drawable in self.drawables:
            if drawable.get_class_name() == 'Triangle':
                if any(self._segment_matches_coords(segment, x1, y1, x2, y2) for segment in [drawable.segment1, drawable.segment2, drawable.segment3]):
                    self.drawables.remove(drawable)

    def get_point(self, x, y):
        for drawable in self.drawables:
            if drawable.get_class_name() == 'Point' and self._point_matches_coords(drawable, x, y):
                return drawable
        return None

    def create_point(self, x, y, name=""):
        p = self.get_point(x, y)
        if p:
            if name != "":
                p.name = name
                self.draw()
            return
        point = Point(x, y, canvas=self, name=name)
        self.add_drawable(point)
        self.draw()

    def delete_point(self, x, y):
        self._delete_point_dependencies(x, y)
        for drawable in self.drawables:
            if drawable.get_class_name() == 'Point' and self._point_matches_coords(drawable, x, y):
                self.drawables.remove(drawable)
                self.draw()
                break
    
    def get_segment(self, x1, y1, x2, y2):
        for drawable in self.drawables:
            if drawable.get_class_name() == 'Segment' and (self._segment_has_point(drawable, x1, y1) and self._segment_has_point(drawable, x2, y2)):
                    return drawable
        return None

    def create_segment(self, x1, y1, x2, y2, name=""):
        segment = Segment(x1, y1, x2, y2, canvas=self, name=name)
        self.add_drawable(segment)
        self.draw()

    def delete_segment(self, x1, y1, x2, y2):
        self._delete_segment_dependencies(x1, y1, x2, y2)
        s = self.get_segment(x1, y1, x2, y2)
        if s:
            self.drawables.remove(s)
            self.draw()

    def get_vector(self, x1, y1, x2, y2):
        for drawable in self.drawables:
            if drawable.get_class_name() == 'Vector' and (self._segment_has_point(drawable.segment, x1, y1) and self._segment_has_point(drawable.segment, x2, y2)):
                    return drawable
        return None

    def create_vector(self, origin_x, origin_y, tip_x, tip_y, name=""):
        vector = Vector(origin_x, origin_y, tip_x, tip_y, canvas=self, name=name)
        self.add_drawable(vector)
        self.draw()

    def delete_vector(self, origin_x, origin_y, tip_x, tip_y,):
        v = self.get_vector(origin_x, origin_y, tip_x, tip_y,)
        if v:
            self.drawables.remove(v)
            self.draw()

    def get_triangle(self, x1, y1, x2, y2, x3, y3):
        for drawable in self.drawables:
            if drawable.get_class_name() == 'Triangle':
                if all(self._segment_matches_coords(segment, x1, y1, x2, y2) or
                    self._segment_matches_coords(segment, x1, y1, x3, y3) or
                    self._segment_matches_coords(segment, x2, y2, x3, y3) 
                    for segment in [drawable.segment1, drawable.segment2, drawable.segment3]):
                    return drawable
        return None

    def create_triangle(self, x1, y1, x2, y2, x3, y3, name=""):
        triangle = Triangle(x1, y1, x2, y2, x3, y3, canvas=self, name=name)
        self.add_drawable(triangle)
        self.draw()

    def delete_triangle(self, x1, y1, x2, y2, x3, y3):
        self.delete_point(x1, y1)
        self.delete_point(x2, y2)
        self.delete_point(x3, y3)