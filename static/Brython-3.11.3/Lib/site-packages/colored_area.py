from drawable import Drawable
from constants import default_color
import copy

class ColoredArea(Drawable):
    def __init__(self, name, canvas=None, color="lightblue", opacity=0.3):
        """Base class for all colored areas"""
        super().__init__(name=name, color=color, canvas=canvas)
        self.opacity = opacity

    def draw(self):
        """
        Draw the colored area. Each subclass must implement its own draw method
        that calls _create_svg_path with appropriate points.
        """
        raise NotImplementedError("Subclasses must implement draw()")

    def _create_svg_path(self, forward_points, reverse_points):
        """
        Create an SVG path from the given points.
        forward_points: List of (x,y) tuples for the forward path
        reverse_points: List of (x,y) tuples for the reverse path
        """
        if not forward_points or not reverse_points:
            return

        # Create SVG path
        path_d = f"M {forward_points[0][0]},{forward_points[0][1]}"
        
        # Add forward path
        for x, y in forward_points[1:]:
            path_d += f" L {x},{y}"
            
        # Add reverse path
        for x, y in reverse_points:
            path_d += f" L {x},{y}"
            
        # Close path
        path_d += " Z"
        
        # Create SVG path element
        self.create_svg_element('path', d=path_d, stroke="none", 
                              fill=self.color, fill_opacity=str(self.opacity))

    def zoom(self):
        pass  # Zooming is handled by the objects defining the area

    def pan(self):
        pass  # Panning is handled by the objects defining the area

    def get_state(self):
        """Base state that all colored areas share"""
        return {
            "name": self.name,
            "args": {
                "color": self.color,
                "opacity": self.opacity
            }
        }

    def __deepcopy__(self, memo):
        """
        Base deepcopy implementation. Subclasses should override this and call
        their own constructor with the appropriate arguments.
        """
        if id(self) in memo:
            return memo[id(self)]
        
        # This will be overridden by subclasses
        raise NotImplementedError("Subclasses must implement __deepcopy__") 