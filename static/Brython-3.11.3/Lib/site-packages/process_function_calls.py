from expression_evaluator import ExpressionEvaluator
from result_processor import ResultProcessor
from result_validator import ResultValidator

class ProcessFunctionCalls:
    """
    Main class for processing function calls, evaluating expressions, and validating results.
    This class serves as a facade for the various specialized modules to maintain backward compatibility.
    """
    
    @staticmethod
    def evaluate_expression(expression, variables=None, canvas=None):
        """
        Evaluates a mathematical expression or function call.
        
        Args:
            expression: The expression to evaluate
            variables: Optional dictionary of variables for the expression
            canvas: Optional canvas instance for evaluating functions
            
        Returns:
            The result of the evaluation
        """
        return ExpressionEvaluator.evaluate_expression(expression, variables, canvas)
    
    @staticmethod
    def get_results(calls, available_functions, undoable_functions, canvas):
        """
        Process function calls and collect their results.
        
        Args:
            calls: List of function call dictionaries
            available_functions: Dictionary mapping function names to implementations
            undoable_functions: Tuple of function names that are undoable
            canvas: Canvas instance for archiving state and adding computations
            
        Returns:
            Dictionary mapping function call strings to their results
        """
        return ResultProcessor.get_results(calls, available_functions, undoable_functions, canvas)
    
    @staticmethod
    def validate_results(results):
        """
        Validates that results have the correct structure, regardless of whether they contain errors.
        
        Args:
            results: Dictionary of results to validate
            
        Returns:
            bool: True if the results have the correct structure, False otherwise
        """
        return ResultValidator.validate_results(results)
    
    @staticmethod
    def is_successful_result(value):
        """
        Checks if a result value represents a successful computation (not an error or empty).
        
        Args:
            value: The result value to check
            
        Returns:
            bool: True if the result is successful, False otherwise
        """
        return ResultValidator.is_successful_result(value)