import math
from config import default_color, default_point_size
from drawable import Drawable
from math_util import Utilities


class Point(Drawable):
    def __init__(self, x, y, color=default_color, canvas=None):
        self.original_x = x
        self.original_y = y
        super().__init__(color, canvas)
        self._initialize()

    def draw(self):
        x, y = self.x, self.y
        self.create_svg_element('circle', cx=str(x), cy=str(y), r=str(default_point_size), fill=self.color)

    def __str__(self):
        x = self.x
        y = self.y
        return f'{x},{y}'
    
    def _initialize(self):
        if self.canvas:
            scale_factor = self.canvas.scale_factor
            self.x = self.original_x * scale_factor
            self.y = self.original_y * scale_factor
        else:
            self.x = self.original_x
            self.y = self.original_y

    def _translate(self, offset_point):
        self.x += offset_point.x
        self.y += offset_point.y
    
    def _scale(self, factor):
        pass # Points are not scaled

    def _scale_coordinates(self, factor):
        self.x *= factor
        self.y *= factor

    def _translate_towards(self, destination, displacement):
        # Calculate the direction vector from the point to the destination
        dx = destination.x - self.x
        dy = destination.y - self.y
        # Normalize the direction vector
        magnitude = math.sqrt(dx**2 + dy**2)
        dx /= magnitude
        dy /= magnitude
        # Update the coordinates by adding the displacement in the direction of the destination
        offset_point = Point(displacement * dx, displacement * dy)
        self._translate(offset_point)

    def zoom(self):
        if self.canvas:
            zoom_point = self.canvas.zoom_point
            zoom_direction = self.canvas.zoom_direction
            zoom_step = self.canvas.zoom_step
            distance = Utilities.get_2D_distance(zoom_point, self)
            displacement = distance * zoom_step * zoom_direction
            self._translate_towards(zoom_point, displacement)