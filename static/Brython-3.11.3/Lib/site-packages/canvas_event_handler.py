from browser import document
from constants import double_click_threshold_s, zoom_in_scale_factor, zoom_out_scale_factor
from geometry import Position
import time


class CanvasEventHandler:
    def __init__(self, canvas, ai_interface):
        self.canvas = canvas
        self.ai_interface = ai_interface
        self.last_click_timestamp = None
        self.bind_events()
    
    def bind_events(self):
        document["send-button"].bind("click", self.ai_interface.interact_with_ai)
        document["chat-input"].bind("keypress", self.check_enter)
        document["math-svg"].bind("wheel", self.handle_wheel)
        document["math-svg"].bind("mousedown", self.handle_mousedown)
        document["math-svg"].bind("mouseup", self.handle_mouseup)
        document["math-svg"].bind("mousemove", self.handle_mousemove)

    def check_enter(self, event):
        if event.keyCode == 13:  # 13 is the key code for Enter
            self.ai_interface.interact_with_ai(event)

    def handle_wheel(self, event):
        svg_canvas = document['math-svg']
        rect = svg_canvas.getBoundingClientRect()
        # Save the current zoom point and update it to the mouse position
        self.canvas.zoom_point = Position(event.clientX - rect.left, event.clientY - rect.top)
        if event.deltaY < 0:
            # Zoom in
            self.canvas.scale_factor *= zoom_in_scale_factor
            self.canvas.zoom_direction = -1
        else:
            # Zoom out
            self.canvas.scale_factor *= zoom_out_scale_factor
            self.canvas.zoom_direction = 1
        self.canvas.draw(True)

    def get_decimal_places(self, value):
        # Absolute value to handle negative numbers
        abs_val = abs(value)
        if 0 < abs_val < 1:
            # Number of leading zeros after decimal point + 1
            # Using format to convert the number to string and split by the decimal point
            decimal_part = format(abs_val, ".10f").split(".")[1]
            leading_zeros = len(decimal_part) - len(decimal_part.lstrip('0'))
            decimal_places_needed = leading_zeros + 2
            return decimal_places_needed
        elif 0 < abs_val < 10:
            return 2
        elif abs_val < 100:
            return 1
        else:
            return 0

    def handle_mousedown(self, event):
        # Check for double click
        current_timestamp = time.time()
        if self.last_click_timestamp and (current_timestamp - self.last_click_timestamp) < double_click_threshold_s:
            # It's a double click
            rect = document["math-svg"].getBoundingClientRect()
            canvas_x = event.clientX - rect.left
            canvas_y = event.clientY - rect.top
            scale_factor = self.canvas.scale_factor
            origin = self.canvas.cartesian2axis.origin
            # Calculate the coordinates of the clicked point
            x = (canvas_x - origin.x) * 1/scale_factor
            y = (origin.y - canvas_y) * 1/scale_factor
            # Calculate the number of decimal places for x and y
            decimal_places_x = self.get_decimal_places(x)
            decimal_places_y = self.get_decimal_places(y)
            # Round x and y to the determined number of decimal places
            x = round(x, decimal_places_x)
            y = round(y, decimal_places_y)
            coordinates = f"({x}, {y}) "
            document["chat-input"].value += coordinates

        self.last_click_timestamp = current_timestamp

        # Logic for panning the canvas
        self.canvas.dragging = True
        self.canvas.last_mouse_position = Position(event.clientX, event.clientY)

    def handle_mouseup(self, event):
        self.canvas.dragging = False

    def handle_mousemove(self, event):
        if self.canvas.dragging:
            dx = event.clientX - self.canvas.last_mouse_position.x
            dy = event.clientY - self.canvas.last_mouse_position.y
            self.canvas.offset.x += dx
            self.canvas.offset.y += dy
            self.canvas.last_mouse_position = Position(event.clientX, event.clientY)
            self.canvas.draw(False) 