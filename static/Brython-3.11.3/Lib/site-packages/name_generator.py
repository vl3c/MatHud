from itertools import count
import re


class DrawableNameGenerator:
    def __init__(self, canvas):
        self.canvas = canvas

    def print_names(self):
        print(f"Point names: {self.get_drawable_names('Point')}")
        print(f"Segment names: {self.get_drawable_names('Segment')}")
        print(f"Triangle names: {self.get_drawable_names('Triangle')}")
        print(f"Rectangle names: {self.get_drawable_names('Rectangle')}")
        print(f"Circle names: {self.get_drawable_names('Circle')}")
        print(f"Ellipse names: {self.get_drawable_names('Ellipse')}")
        print(f"Function names: {self.get_drawable_names('Function')}")

    def get_drawable_names(self, class_name):
        drawables = self.canvas.get_drawables_by_class_name(class_name)
        drawable_names = sorted([drawable.name for drawable in drawables])
        return drawable_names

    def filter_string(self, name):
        # Regular expression to match letters, apostrophes, digits, and parentheses
        pattern = r"[a-zA-Z0-9'\(\)]+"
        matches = re.findall(pattern, name)
        return ''.join(matches)

    def split_point_names(self, expression, n=2):
        if expression is None or len(expression) < 1:
            return [''] * n
        expression = self.filter_string(expression)
        expression = expression.upper()
        matches = re.findall(r'[A-Z][\']*', expression)
        # Remove duplicates while maintaining order
        matches = list(dict.fromkeys(matches))
        if len(matches) == n:
            return sorted([match for match in matches])
        elif len(matches) > n:
            return sorted([matches[i] for i in range(n)])
        else:
            return sorted([matches[i] for i in range(len(matches))]) + [''] * (n - len(matches))
            
    def _generate_unique_point_name(self):
        alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        point_names = self.get_drawable_names('Point')
        # Start with no apostrophes and increase the number of apostrophes until a unique name is found
        num_apostrophes = 0
        while True:
            for letter in alphabet:
                name = letter + "'" * num_apostrophes
                if name not in point_names:
                    return name
            num_apostrophes += 1

    def generate_point_name(self, preferred_name):
        if not preferred_name:
            return self._generate_unique_point_name()
        preferred_name = self.split_point_names(preferred_name)[0]
        point_names = self.get_drawable_names('Point')
        # If the preferred name is not already used, return it
        if preferred_name not in point_names:
            return preferred_name
        # If the preferred name is already used, generate a new unique name
        return self._generate_unique_point_name()

    def _increment_function_name(self, func_name):
        func_name = self.filter_string(func_name)
        # Check if there is a number after the function name, if not, append 1; if there is, increment it
        match = re.search(r'(?<=\w)(\d+)$', func_name)
        if match:
            number = int(match.group())
            func_name = func_name[:match.start()] + str(number + 1)
        else:
            # If there is no number, simply append '1' to the function name
            func_name += '1'
        return func_name

    def _generate_unique_function_name(self):
        func_alphabet = 'fghijklmnopqrstuvwxyzabcde'
        function_names = self.get_drawable_names('Function')
        for number in count():
            for letter in func_alphabet:
                func_name = f"{letter}{number if number > 0 else ''}"
                if func_name not in function_names:
                    return func_name
        raise ValueError("All function names are taken")

    def generate_function_name(self, preferred_name):
        if not preferred_name:
            return self._generate_unique_function_name()
        function_names = self.get_drawable_names('Function')
        # get the function name before the first '('
        match = re.search(r'(?<=\w)(?=\()', preferred_name)
        if match:
            preferred_name = preferred_name[:match.start()]
        # If the preferred name is not already used, return it
        if preferred_name not in function_names:
            return preferred_name
        # If the preferred name is already used, increment until we generate a new unique name
        while True:
            preferred_name = self._increment_function_name(preferred_name)
            if preferred_name not in function_names:
                return preferred_name