import unittest
import copy
from point import Point
from position import Position
from math_geometry import Segment
from .simple_mock import SimpleMock


class TestSegment(unittest.TestCase):
    def setUp(self):
        self.canvas = SimpleMock(scale_factor=1, cartesian2axis=SimpleMock(origin=Position(0, 0)),
                                 is_point_within_canvas_visible_area=SimpleMock(return_value=True),
                                 any_segment_part_visible_in_canvas_area=SimpleMock(return_value=True))
        self.p1 = Point(0, 0, self.canvas, name="A", color="red")
        self.p2 = Point(3, 4, self.canvas, name="B", color="red")
        self.segment = Segment(self.p1, self.p2, self.canvas, color="blue")

    def test_initialize(self):
        self.segment._initialize()
        self.assertEqual(self.segment.point1.x, 0)
        self.assertEqual(self.segment.point1.y, 0)
        self.assertEqual(self.segment.point2.x, 3)
        self.assertEqual(self.segment.point2.y, -4)  # Assuming coordinate system adjustments with 0,0 at top-left

    def test_init(self):
        self.assertEqual(self.segment.point1, self.p1)
        self.assertEqual(self.segment.point2, self.p2)
        self.assertEqual(self.segment.color, "blue")

    def test_get_class_name(self):
        self.assertEqual(self.segment.get_class_name(), 'Segment')

    def test_calculate_line_algebraic_formula(self):
        line_formula = self.segment._calculate_line_algebraic_formula()
        # Expected formula depends on MathUtil.get_line_formula implementation
        self.assertIsNotNone(line_formula)  # Assert based on expected output

    def test_any_segment_part_visible_in_canvas_area(self):
        visible = self.segment._any_segment_part_visible_in_canvas_area()
        self.assertTrue(visible)

    def test_is_visible(self):
        self.segment.children = {SimpleMock()}
        self.assertFalse(self.segment.is_visible())  # Assuming children make segment hidden
        self.segment.children = {}
        self.assertTrue(self.segment.is_visible())

    def test_get_state(self):
        state = self.segment.get_state()
        expected_state = {"name": "AB", "args": {"p1": "A", "p2": "B", "line_formula": self.segment.line_formula}}
        self.assertEqual(state, expected_state)

    def test_deepcopy(self):
        segment_copy = copy.deepcopy(self.segment)
        self.assertIsNot(segment_copy, self.segment)
        self.assertIsNot(segment_copy.point1, self.segment.point1)
        self.assertIsNot(segment_copy.point2, self.segment.point2)
        self.assertEqual(segment_copy.color, self.segment.color)

    def test_draw(self):
        # This test would check if draw calls create_svg_element with expected arguments
        # Might require a more complex setup or mocking to verify SVG output
        pass

