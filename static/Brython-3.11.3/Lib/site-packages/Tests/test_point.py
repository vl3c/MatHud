import unittest
import copy
from point import Point
from position import Position
from .simple_mock import SimpleMock


class TestPoint(unittest.TestCase):
    def setUp(self):
        self.canvas = SimpleMock(scale_factor=1, cartesian2axis=SimpleMock(origin=Position(0, 0)), 
                                 is_point_within_canvas_visible_area=SimpleMock(return_value=True),
                                 zoom_point=Position(1, 1), zoom_direction=1, zoom_step=0.1, offset=Position(0.5, 0.5))
        self.point = Point(1, 2, self.canvas, name="p1", color="red")

    def test_initialize(self):
        self.point._initialize()
        self.assertEqual(self.point.x, 1)
        self.assertEqual(self.point.y, -2) # Assuming coordinate system adjustments with 0,0 at top-left

    def test_init(self):
        self.assertEqual(self.point.original_position.x, 1)
        self.assertEqual(self.point.original_position.y, 2)
        self.assertEqual(self.point.name, "p1")
        self.assertEqual(self.point.color, "red")

    def test_get_class_name(self):
        self.assertEqual(self.point.get_class_name(), 'Point')

    def test_str(self):
        self.assertEqual(str(self.point), '1,-2')

    def test_get_state(self):
        expected_state = {"name": "p1", "args": {"position": {"x": 1, "y": 2}}}
        self.assertEqual(self.point.get_state(), expected_state)

    def test_is_visible(self):
        self.assertTrue(self.point.is_visible())

    def test_deepcopy(self):
        point_copy = copy.deepcopy(self.point)
        self.assertEqual(point_copy.original_position.x, self.point.original_position.x)
        self.assertEqual(point_copy.original_position.y, self.point.original_position.y)
        self.assertEqual(point_copy.name, self.point.name)
        self.assertEqual(point_copy.color, self.point.color)
        self.assertIsNot(point_copy, self.point)
        self.assertIsNot(point_copy.original_position, self.point.original_position)

    def test_translate(self):
        self.point._translate(Position(1, 1))
        self.assertEqual(self.point.x, 2)
        self.assertEqual(self.point.y, -1) # Assuming coordinate system adjustments with 0,0 at top-left

    def test_translate_towards(self):
        self.point._translate_towards(Position(2, 2), 1)
        self.assertAlmostEqual(round(self.point.x, 4), 1.2425, places=4)
        self.assertAlmostEqual(round(self.point.y, 5), -1.02986, places=5) # Assuming coordinate system adjustments with 0,0 at top-left

    def test_zoom(self):
        self.point.zoom()
        self.assertAlmostEqual(self.point.x, 1.0, places=4)
        self.assertAlmostEqual(self.point.y, -1.7, places=4) # Assuming coordinate system adjustments with 0,0 at top-left

    def test_pan(self):
        self.point.pan()
        self.assertEqual(self.point.x, 1.5)
        self.assertEqual(self.point.y, -1.5) # Assuming coordinate system adjustments with 0,0 at top-left

    def test_draw(self):
        # This test would check if draw calls create_svg_element with expected arguments
        # Might require a more complex setup or mocking to verify SVG output
        pass

