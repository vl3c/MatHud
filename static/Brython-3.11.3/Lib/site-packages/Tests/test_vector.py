import unittest
import copy
from point import Position, Point
from math_geometry import Vector
from .simple_mock import SimpleMock


class TestVector(unittest.TestCase):
    def setUp(self):
        self.canvas = SimpleMock(scale_factor=1, cartesian2axis=SimpleMock(origin=Position(0, 0)),
                                 is_point_within_canvas_visible_area=SimpleMock(return_value=True),
                                 any_segment_part_visible_in_canvas_area=SimpleMock(return_value=True))
        self.origin = Point(0, 0, self.canvas, name="O", color="black")
        self.tip = Point(3, 4, self.canvas, name="T", color="black")
        self.vector = Vector(self.origin, self.tip, self.canvas, color="green")

    def test_initialize(self):
        self.vector._initialize()
        # Test that the vector's segment has been initialized correctly
        self.assertEqual(self.vector.segment.point1.x, 0)
        self.assertEqual(self.vector.segment.point1.y, 0)
        self.assertEqual(self.vector.segment.point2.x, 3)
        self.assertEqual(self.vector.segment.point2.y, -4)  # Assuming coordinate system adjustments

    def test_init(self):
        # Test the initial properties of the vector
        self.assertEqual(self.vector.segment.point1, self.origin)
        self.assertEqual(self.vector.segment.point2, self.tip)
        self.assertEqual(self.vector.color, "green")

    def test_get_class_name(self):
        self.assertEqual(self.vector.get_class_name(), 'Vector')

    def test_get_state(self):
        state = self.vector.get_state()
        expected_state = {"name": "OT", "args": {"origin": "O", "tip": "T", "line_formula": self.vector.segment.line_formula}}
        self.assertEqual(state, expected_state)

    def test_deepcopy(self):
        vector_copy = copy.deepcopy(self.vector)
        self.assertIsNot(vector_copy, self.vector)
        self.assertIsNot(vector_copy.segment, self.vector.segment)
        self.assertEqual(vector_copy.color, self.vector.color)

    def test_draw(self):
        # This test would check if draw calls create_svg_element with expected arguments
        # Might require a more complex setup or mocking to verify SVG output
        pass

