import unittest
from name_generator import DrawableNameGenerator
from .simple_mock import SimpleMock


class TestDrawableNameGenerator(unittest.TestCase):
    def setUp(self):
        self.canvas = SimpleMock()
        self.generator = DrawableNameGenerator(self.canvas)

    def test_get_drawable_names(self):
        # Here, get_drawables_by_class_name is expected to be a callable that returns a list of mocks when called
        self.canvas.get_drawables_by_class_name = SimpleMock(
            return_value=[SimpleMock(name='Point1'), SimpleMock(name='Point2')]
        )
        result = self.generator.get_drawable_names('Point')
        self.assertEqual(result, ['Point1', 'Point2'])

    def test_filter_string(self):
        # Test with a string that contains letters, digits, apostrophes, and parentheses
        result = self.generator.filter_string("Test(123)'")
        self.assertEqual(result, "Test(123)'")
        # Test with a string that contains special characters
        result = self.generator.filter_string("Hello, World!")
        self.assertEqual(result, "HelloWorld")
        # Test with a string that contains whitespace
        result = self.generator.filter_string("Hello World")
        self.assertEqual(result, "HelloWorld")
        # Test with a string that contains only disallowed characters
        result = self.generator.filter_string("!@#$%^&*")
        self.assertEqual(result, "")
        # Test with an empty string
        result = self.generator.filter_string("")
        self.assertEqual(result, "")

    def test_split_point_names(self):
        result = self.generator.split_point_names("A'B'CD", 4)
        self.assertEqual(result, ["A'", "B'", "C", "D"])

    def test_generate_unique_point_name(self):
        self.canvas.get_drawables_by_class_name = SimpleMock(return_value=[])
        point_names = []
        for _ in range(52):
            new_name = self.generator._generate_unique_point_name()
            point_names.append(new_name)
            # Update the return_value of get_drawables_by_class_name with each new name
            self.canvas.get_drawables_by_class_name.return_value.append(SimpleMock(name=new_name))
        # The next point name should be 'A'' (A with two apostrophes)
        result = self.generator._generate_unique_point_name()
        self.assertEqual(result, "A''")

    def test_generate_point_name(self):
        self.canvas.get_drawables_by_class_name = SimpleMock(
            return_value=[SimpleMock(name='A')]
        )
        result = self.generator.generate_point_name(None)
        self.assertEqual(result, 'B')

    def test_generate_point_name_with_preferred_name(self):
        self.canvas.get_drawables_by_class_name = SimpleMock(
            return_value=[SimpleMock(name='A')]
        )
        result = self.generator.generate_point_name('B')
        self.assertEqual(result, 'B')

    def test_generate_point_name_with_used_preferred_name(self):
        self.canvas.get_drawables_by_class_name = SimpleMock(
            return_value=[SimpleMock(name='A'), SimpleMock(name='B')]
        )
        result = self.generator.generate_point_name('B')
        self.assertNotEqual(result, 'B')

    def test_increment_function_name(self):
        # Test with a function name that ends with a number
        result = self.generator._increment_function_name('f4')
        self.assertEqual(result, 'f5')
        # Test with a function name that does not end with a number
        result = self.generator._increment_function_name('f')
        self.assertEqual(result, 'f1')
        # Test with a function name that ends with a large number
        result = self.generator._increment_function_name('f99')
        self.assertEqual(result, 'f100')
        # Test with a function name that ends with a number and has other numbers in it
        result = self.generator._increment_function_name('f4f4')
        self.assertEqual(result, 'f4f5')
        # Test with a function name that does not end with a number and has other numbers in it
        result = self.generator._increment_function_name('f4f')
        self.assertEqual(result, 'f4f1')

    def test_generate_unique_function_name(self):
        self.canvas.get_drawables_by_class_name = SimpleMock(return_value=[])
        function_names = []
        for _ in range(42):
            new_name = self.generator._generate_unique_function_name()
            function_names.append(new_name)
            # Update the return_value of get_drawables_by_class_name with each new name
            self.canvas.get_drawables_by_class_name.return_value.append(SimpleMock(name=new_name))
        # The next function name should be 'r1'
        result = self.generator._generate_unique_function_name()
        self.assertEqual(result, "v1")

    def test_generate_function_name(self):
        self.canvas.get_drawables_by_class_name = SimpleMock(
            return_value=[SimpleMock(name='f'), SimpleMock(name='f1')]
        )
        result = self.generator.generate_function_name(None)
        self.assertEqual(result, 'g')

    def test_generate_function_name_with_preferred_name(self):
        self.canvas.get_drawables_by_class_name = SimpleMock(
            return_value=[SimpleMock(name='f1')]
        )
        result = self.generator.generate_function_name('f2')
        self.assertEqual(result, 'f2')

    def test_generate_function_name_with_used_preferred_name(self):
        self.canvas.get_drawables_by_class_name = SimpleMock(
            return_value=[SimpleMock(name='f1'), SimpleMock(name='f2')]
        )
        result = self.generator.generate_function_name('f2')
        self.assertEqual(result, 'f3')

    def test_generate_function_name_with_preferred_name_and_parentheses(self):
        self.canvas.get_drawables_by_class_name = SimpleMock(
            return_value=[SimpleMock(name='f1')]
        )
        result = self.generator.generate_function_name('f2(x)')
        self.assertEqual(result, 'f2')

    def test_generate_function_name_with_used_preferred_name_and_parentheses(self):
        self.canvas.get_drawables_by_class_name = SimpleMock(
            return_value=[SimpleMock(name='f1'), SimpleMock(name='f2')]
        )
        result = self.generator.generate_function_name('f2(x)')
        self.assertEqual(result, 'f3')
