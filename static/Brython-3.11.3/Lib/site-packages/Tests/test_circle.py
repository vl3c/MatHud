import unittest
import copy
from point import Point
from position import Position
from math_geometry import Circle
from .simple_mock import SimpleMock


class TestCircle(unittest.TestCase):
    def setUp(self):
        self.canvas = SimpleMock(scale_factor=1, cartesian2axis=SimpleMock(origin=Position(0, 0)),
                                 is_point_within_canvas_visible_area=SimpleMock(return_value=True))
        self.center = Point(1, 1, self.canvas, name="Center", color="black")
        self.radius = 5
        self.circle = Circle(self.center, self.radius, self.canvas, color="blue")

    def test_initialize(self):
        self.circle._initialize()
        self.assertEqual(self.circle.drawn_radius, self.radius * self.canvas.scale_factor)
        self.assertEqual(self.circle.center, self.center)

    def test_init(self):
        self.assertEqual(self.circle.center, self.center)
        self.assertEqual(self.circle.radius, self.radius)
        self.assertEqual(self.circle.color, "blue")

    def test_get_class_name(self):
        self.assertEqual(self.circle.get_class_name(), 'Circle')

    def test_calculate_circle_algebraic_formula(self):
        formula = self.circle._calculate_circle_algebraic_formula()
        self.assertIsNotNone(formula)

    def test_zoom(self):
        new_scale_factor = 2
        self.canvas.scale_factor = new_scale_factor
        self.circle.zoom()
        self.assertEqual(self.circle.drawn_radius, self.radius * new_scale_factor)

    def test_get_state(self):
        state = self.circle.get_state()
        expected_state = {"name": self.circle.name, "args": {"center": self.center.name, "radius": self.radius, "circle_formula": self.circle.circle_formula}}
        self.assertEqual(state, expected_state)

    def test_deepcopy(self):
        circle_copy = copy.deepcopy(self.circle)
        self.assertIsNot(circle_copy, self.circle)
        self.assertIsNot(circle_copy.center, self.circle.center)
        self.assertEqual(circle_copy.radius, self.circle.radius)
        self.assertEqual(circle_copy.color, self.circle.color)

    def test_draw(self):
        # This test would check if draw calls create_svg_element with expected arguments
        # Might require a more complex setup or mocking to verify SVG output
        pass
